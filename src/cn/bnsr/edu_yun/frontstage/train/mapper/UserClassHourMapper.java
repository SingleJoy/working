package cn.bnsr.edu_yun.frontstage.train.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.train.po.UserClassHour;
import cn.bnsr.edu_yun.frontstage.train.view.ClassView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseHourView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseRankView;
import cn.bnsr.edu_yun.frontstage.train.view.UserClassHourView;
import cn.bnsr.edu_yun.frontstage.train.view.UserTotalScoreView;

public interface UserClassHourMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	int insert(UserClassHour record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	int insertSelective(UserClassHour record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	UserClassHour selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	int updateByPrimaryKeySelective(UserClassHour record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table user_class_hour
	 * @mbggenerated  Thu Mar 09 16:14:28 CST 2017
	 */
	int updateByPrimaryKey(UserClassHour record);

	UserClassHour selectByNextStudy(UserClassHour record);
	
    int selectCountByCourseIdAndUserId(UserClassHour record);
	
    int selectCountByCourseIdAndUserIdStudy(UserClassHour record);
	
    UserClassHour selectByUpAndDown(@Param("type") long type,@Param("course_hour_id") long course_hour_id,@Param("learn_id") long learn_id,@Param("user_id") long user_id,@Param("source_id") long source_id,@Param("source_type") int source_type);

	UserClassHour selectByHourId(UserClassHour record);
	/**统计班级课时完成数*/
	int countCompleteCourseHour(ClassView ClassView);

	int countIsNotStudy(UserClassHourView uchv);

	int queryIsNotStudy(UserClassHourView userClassHourView);
	
	int queryData(UserClassHourView userClassHourView);
	
	List<User> queryUnfinish(CourseHourView courseHourView);

	List<UserClassHourView> queryCourseStudyed(@Param("userId")Long userId,@Param("courseId") Long courseId,@Param("classId")Long classId);
	 
	List<UserClassHour> queryAll(@Param("classId")Long class_id);
	
	UserTotalScoreView queryUserScore(UserClassHourView userClassHourView);
	
	void deleteClassHour(@Param("userId")Long user_id,@Param("classId")Long class_id);
    
	List<CourseRankView> paceRank(CourseRankView courseRankView);
	
	List<CourseRankView> durationRank(CourseRankView courseRankView);
}