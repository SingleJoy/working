package cn.bnsr.edu_yun.frontstage.train.controller;

import java.io.InputStream;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.csource.common.NameValuePair;
import org.csource.fastdfs.ClientGlobal;
import org.csource.fastdfs.StorageClient1;
import org.csource.fastdfs.StorageServer;
import org.csource.fastdfs.TrackerClient;
import org.csource.fastdfs.TrackerServer;
import org.csource.fastdfs.UploadStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.train.po.CourseFile;
import cn.bnsr.edu_yun.frontstage.train.service.CourseFileService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseInfoService;
import cn.bnsr.edu_yun.frontstage.train.view.CourseFileView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseView;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;
import net.sf.json.JSONObject;

/**
 * 课程文件管理
 * @author fangxiongwei
 * @date 2016年11月1日
 */ 
@Controller
@RequestMapping("/course_file")
public class CourseFileController {
private final Logger log = LoggerFactory.getLogger(CourseFileController.class);
	
	@Autowired
	private CourseFileService courseFileService;
	@Autowired
	private CourseInfoService courseInfoService;
	
	
	/**
	 * 跳转课程文件页面
	 */
	@RequestMapping("/to_course_file")
	public ModelAndView toCourseFile(HttpServletRequest request,CourseView courseView){
		ModelAndView modelAndView = new ModelAndView();
		try {
			String sign = courseView.getSign();
			String flag = courseView.getFlag();
			if(courseView.getId() != null){
				courseView = courseInfoService.queryCourseDetail(courseView.getId());
			}
			
			List<CourseFileView> fileList = courseFileService.queryCourseFile(courseView.getId());
			
			courseView.setSign(sign);
			courseView.setFlag(flag);
			
			modelAndView.addObject("fileList",fileList);	
			modelAndView.addObject("courseView",courseView);	
			modelAndView.addObject("head_title", "课程文件");
			modelAndView.setViewName("frontstage/train/course/course_file");
		} catch (Exception e) {
			log.error("跳转课程文件页面失败",ExceptionUtil.getExceptionMessage(e));
		}
		
		return modelAndView;
	}
	
	/**
	 * 删除课程文件
	 */
	@RequestMapping("/delete_course_file")
	public ModelAndView deleteCourseFile(HttpServletRequest request){
		String sign = request.getParameter("sign");
		String id = request.getParameter("id");
		String fileIds = request.getParameter("fileId");
		try {
			courseFileService.deleteCourseFile(fileIds);
		} catch (Exception e) {
			log.error("删除课程文件失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/course_file/to_course_file.action?id="
				+ id + "&flag=1&sign="+sign);
	}
	
	
	
	
	 /**
	 * @param request
	 * @throws Exception
	 */
	@RequestMapping("/upload_file")
	 public void upload(HttpServletRequest request,HttpServletResponse response) throws Exception {  
		User user = (User) request.getSession().getAttribute("currentUser");
		String courseId = request.getParameter("courseId");
		//上传部分，IO操作
		//创建一个通用的多部分解析器  
	    CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());  
	    //判断 request 是否有文件上传,即多部分请求  
	    if(multipartResolver.isMultipart(request)){  
	        //转换成多部分request    
    	    MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest)request;  
	        //取得request中的所有文件名  
	        Iterator<String> iter = multiRequest.getFileNames();  
	        
	        while(iter.hasNext()){  
	            //取得上传文件
	            MultipartFile file = multiRequest.getFile(iter.next());  
	            int pre = (int) System.currentTimeMillis();  
                if(!file.isEmpty()){  
                     String tempFileName = file.getOriginalFilename();  
                     System.out.println("第一个路径"+tempFileName);
                     //fastDFS方式  
                     ClassPathResource cpr = new ClassPathResource("fdfs_client.conf");  
//                     
                     String configpath = cpr.getClassLoader().getResource("fdfs_client.conf").getPath();/*.replaceAll("%20", " ")*/
                     ClientGlobal.init(configpath);  
                     long fileLength = file.getSize();
                     InputStream inStream = file.getInputStream();
             		 UploadStream uploadStream = new UploadStream(inStream, fileLength);
                     String fileId = "";  
                     String fileExtName = tempFileName.substring(tempFileName.lastIndexOf("."));  
                     System.out.println("第二个路径"+fileExtName);
                     //建立连接  
                     TrackerClient tracker = new TrackerClient();  
                     TrackerServer trackerServer = tracker.getConnection();  
                     StorageServer storageServer = null;  
                     StorageClient1 client = new StorageClient1(trackerServer, storageServer);  
                       
                     //设置元信息  
                     NameValuePair[] metaList = new NameValuePair[3];  
                     metaList[0] = new NameValuePair("fileName", tempFileName);  
                     metaList[1] = new NameValuePair("fileExtName", fileExtName);  
                     metaList[2] = new NameValuePair("fileLength", String.valueOf(file.getSize()));  
                       
                     //上传文件  
                     fileId = client.upload_file1("group1", fileLength, uploadStream, fileExtName, metaList);
                     
                     System.out.println(fileId);
                     int finaltime = (int) System.currentTimeMillis();  
                     System.out.print("用时：");
                     System.out.println(finaltime - pre); 
                     
                     CourseFile courseFile = new CourseFile();
                     courseFile.setPath(fileId);
                     courseFile.setName(tempFileName);
                     courseFile.setType(0);//视频
                     courseFile.setCreate_time(new Date());
                     courseFile.setUser_id(user.getId());
                     courseFile.setIs_use(1);//没有使用
                     courseFile.setStatus(1);//未审核
                     courseFile.setFlag(0);//课时文件
                     courseFile.setSize(NumUtil.toSize(fileLength));
                     courseFile.setCourse_id(Long.parseLong(courseId));
                     Long courseFileId =  courseFileService.saveFile(courseFile);
                     JSONObject result=new JSONObject();
            		 result.put("courseFileId", courseFileId);
            		 result.put("courseFileName", tempFileName);
            		 ResponseUtil.write(response, result);

                }
	        }
	    }
	 }
	
}
