package cn.bnsr.edu_yun.frontstage.resource.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.csource.fastdfs.ClientGlobal;
import org.csource.fastdfs.StorageClient1;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.service.UserFileService;
import cn.bnsr.edu_yun.frontstage.resource.po.File_base;
import cn.bnsr.edu_yun.frontstage.resource.po.File_property;
import cn.bnsr.edu_yun.frontstage.resource.po.User_file;
import cn.bnsr.edu_yun.frontstage.resource.service.FilePropertyService;
import cn.bnsr.edu_yun.frontstage.resource.service.File_baseService;
import cn.bnsr.edu_yun.util.ResponseUtil;

@Controller
@RequestMapping("/userFile")
public class UserFileController {

	@Autowired
	private File_baseService fileBaseService;
	@Autowired
	private UserFileService userFileService;
	@Autowired
	private FilePropertyService filePropertyService;
	
	
	@RequestMapping("/keepFile")
	public ModelAndView keepFile(HttpServletRequest request,HttpServletResponse response) throws Exception{
		JSONObject result=new JSONObject();
		String fileBase_id   =	request.getParameter("fileBase_id");
		String type=request.getParameter("type");
		HttpSession session=request.getSession();
		User user=(User) session.getAttribute("currentUser");
		if(user==null){
			result.put("msg", "请登录");
		}else{
			long file_id=Long.parseLong(fileBase_id);
			long user_id=user.getId();
		User_file userFile=userFileService.selectFile(user_id, file_id);
		if(userFile!=null){
			result.put("msg", "已经收藏过了");
		}else{
			userFile=new User_file();
		userFile.setFile_id(file_id);
		userFile.setType(Byte.parseByte(type));
		userFile.setUser_id(user_id);
		userFile.setTime(new Date());
	int i=	userFileService.insert(userFile);
	result.put("msg", "收藏成功");
	System.out.println(i);
	}
		}
		ResponseUtil.write(response, result);
		return null;
		
		
	}
	@RequestMapping("/checkBuy")
	public ModelAndView checkBuy(HttpServletRequest request,HttpServletResponse response,String fileBase_id) throws Exception{
		JSONObject result=new JSONObject();
		
	long file_id=Long.parseLong(fileBase_id);
	HttpSession session=request.getSession();
	User user=(User) session.getAttribute("currentUser");
	if(user==null){
		result.put("msg", "请登录");
		result.put("status", 0);
	}else{
		long user_id=user.getId();
		User_file userFile=userFileService.selectBuyFile(user_id, file_id);
		if(userFile==null){
			//没有购买，需要购买
			result.put("status", 1);
		}else{
			//已购买，直接下载
			result.put("status", 2);
		}
		
	}
	
		
	ResponseUtil.write(response, result);
	return null;
	}
	
	
	@RequestMapping("/download")
	public ModelAndView download(HttpServletRequest request,HttpServletResponse response) throws URISyntaxException, Exception{
	    String fileBase_id   =	request.getParameter("fileBase_id");
	
		long fileBaseId=Long.parseLong(fileBase_id);
		
		ClassPathResource classPathResource = new ClassPathResource("fdfs_client.conf");
		 ClientGlobal.init(classPathResource.getClassLoader().getResource("fdfs_client.conf").toURI().getPath());
		StorageClient1 storageClient1 = new StorageClient1();
		
		File_base fileBase=fileBaseService.selectById(fileBaseId);
		
		 String location = fileBase.getPath();
		 
			byte[] bs=storageClient1.download_file1(location);
			
			String    uploadPath=request.getSession().getServletContext().getRealPath("/read");
			System.out.println(uploadPath);
			  File folder=new File(uploadPath);
	          if(!folder.exists()){
	          	folder.mkdirs();
	          }
	          File file=new File(uploadPath.replace("\\", "/"));
	  		if(!file.exists()){
				file.mkdirs();
			}
	  		String format="."+fileBase.getFormat();
			int code = (int)((Math.random()*9+1)*100000);
			String fileName="file"+fileBase.getId()+code+format;
			String  path = uploadPath.replace("\\", "/")+"/"+fileName;
			System.out.println(uploadPath);
			System.out.println(path);
			IOUtils.write(bs,new FileOutputStream(new File( path)));
			String filePath=uploadPath.replace("\\", "/");
		String Filename=fileBase.getFilename()+format;
		if(format.equals(".txt")){
			int index=fileName.lastIndexOf(".txt");
		   fileName=fileName.substring(0, index)+".odt";
		
		}
        final String CONTENT_TYPE = "text/plain; charset=UTF-8";
        response.setContentType(CONTENT_TYPE);
        response.setContentType("application/x-msdownload");
        File downFile =new File(filePath+"/"+fileName);
		response.setContentLength((int)downFile.length());
        //需要判断是什么浏览器
         String  explorer=request.getParameter("explorer");
         System.out.println( explorer);
        String name= getFileName(Filename, explorer);
        response.setHeader("Content-Disposition",name); 
        //读出文件到i/o流
        FileInputStream fis=new FileInputStream(downFile);
        BufferedInputStream buff=new BufferedInputStream(fis);
     
        byte [] b=new byte[1024];//相当于我们的缓存

        long k=0;//该值用于计算当前实际下载了多少字节

        //从response对象中得到输出流,准备下载

        OutputStream myout=response.getOutputStream();

        //开始循环下载

        while(k<downFile.length()){

            int j=buff.read(b,0,1024);
            k+=j;

            //将b中的数据写到客户端的内存
            myout.write(b,0,j);
            
        }

        //将写入到客户端的内存的数据,刷新到磁盘
        myout.flush();
        myout.close();
        //增加点击数
	    System.out.println(fileBase.getFile_property().getDownload_times());
	    File_property property=new File_property();
	    property.setId(fileBase.getProperty_id());
	    property.setDownload_times(fileBase.getFile_property().getDownload_times()+1);
	    filePropertyService.update(property);
		return null;
		
	}
private String getFileName(String FileName,String explorer) throws UnsupportedEncodingException{
		
		//需要判断是什么浏览器
        //String  explorer=request.getParameter("explorer");
        System.out.println( explorer);
        /*
         * new_filename = URLEncoder.encode(Filename, "UTF8");  
         */
    // "IE";  rtn = "filename=\"" + new_filename + "\"";  
	 // "Firefox"; rtn = "filename*=UTF-8''" + new_filename; 
	  //"Chrome";  new_filename = MimeUtility.encodeText(filename, "UTF8", "B");  和 rtn = "filename=\"" + new_filename + "\"";  
    // "Opera"; rtn = "filename*=UTF-8''" + new_filename;  
    // "Safari";   rtn = "filename=\"" + new String(filename.getBytes("UTF-8"),"ISO8859-1") + "\"";  
	 String name="attachment;filename="+FileName; 
	 String filename=new String( URLEncoder.encode(FileName, "UTF8"));
    		//"attachment;filename*=UTF-8'"+filename; 
		if(explorer.equals("IE")){
			 name="attachment;filename="+filename; 
		}else if(explorer.equals("Firefox")){
			name="attachment;filename*=UTF-8'"+filename; 
		}else if(explorer.equals("Chrome")){
			name="attachment;filename="+new String(filename.getBytes("UTF-8"),"ISO8859-1") ; 
		}else if(explorer.equals("Opera")){
			name="attachment;filename*=UTF-8'"+filename; 
		}else if(explorer.equals("Safari")){
			name="attachment;filename="+new String(filename.getBytes("UTF-8"),"ISO8859-1") ; 
		}
		
		
		return name;
		
	}

}
