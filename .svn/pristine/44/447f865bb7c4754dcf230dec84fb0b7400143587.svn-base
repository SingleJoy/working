package cn.bnsr.edu_yun.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.service.NotificationService;
import cn.bnsr.edu_yun.frontstage.base.service.PrivateLetterService;
import cn.bnsr.edu_yun.frontstage.base.view.NotificationView;
import cn.bnsr.edu_yun.frontstage.base.view.PrivateLetterView;
import cn.bnsr.edu_yun.util.RequestUtil;

/**
 * session拦截器
 * @author fangxiongwei
 * @date 2016年9月4日
 */
public class SessionInterceptor extends HandlerInterceptorAdapter{  
	private final Logger log = LoggerFactory.getLogger(SessionInterceptor.class);
    @Autowired
    private NotificationService notificationService;
    @Autowired
	private PrivateLetterService privateLetterService;
    @Override    
    public boolean preHandle(HttpServletRequest request,    
            HttpServletResponse response, Object handler) throws Exception {    
    	log.info("===========SessionInterceptor.preHandle============");    
    	String requestPath = RequestUtil.getRequestPath(request);
    	User currentUser = (User) request.getSession().getAttribute("currentUser");
    	if(currentUser == null){//没登录拦截
    		log.info("Interceptor：没有登录！");  
    		
    		//不包含拦截/to_train_center to_train_detail to_community_index to_workshop_index
    		boolean flag=true;
    		String[] str={"to_course_study","to_course_center","user_study/ajax_","to_train_home","to_train_center","to_train_detail","to_community_index","to_workshop_center","to_community_home","ajax_","to_workshop_home"};
            for(String s:str){
            	if(requestPath.indexOf(s)>0){
            		flag=false;
            		break;
            	}
            }
    		if(flag){
    			 request.getRequestDispatcher("../return.jsp").forward(request, response); 
    			 return false;
    		 }
    	}else{
    		NotificationView notificationView=new NotificationView();
    		notificationView.setUser_id(currentUser.getId());
    		HttpSession session=request.getSession();
			session.setAttribute("notification_num", notificationService.queryNoReadCount(notificationView));
			PrivateLetterView privateLetterView=new PrivateLetterView();
			privateLetterView.setUser_id(currentUser.getId());
			session.setAttribute("privateLetter_num", privateLetterService.queryPrivateLetterNotReaddCount(privateLetterView));
			
			
    	}
            
 		return true;
    }    
}
