package cn.bnsr.edu_yun.frontstage.train.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import cn.bnsr.edu_yun.frontstage.train.po.ClassifyRelation;
import cn.bnsr.edu_yun.frontstage.train.service.ClassifyRelationService;
import cn.bnsr.edu_yun.frontstage.train.service.CommunityService;
import cn.bnsr.edu_yun.frontstage.train.service.WorkshopService;
import cn.bnsr.edu_yun.frontstage.train.view.ClassifyRelationView;
import cn.bnsr.edu_yun.frontstage.train.view.CommunityView;
import cn.bnsr.edu_yun.frontstage.train.view.WorkshopView;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;

/**
 * 分类（社区，工作坊）
 * @author sunyu
 * @date 2017年5月17日
 */
@Controller
@RequestMapping("/classify_relation")
public class ClassifyRelationController {
	private final Logger log = LoggerFactory.getLogger(ClassifyRelationController.class);
	@Autowired
	private CommunityService communityService;
	@Autowired
	private WorkshopService workshopService;
	@Autowired
	private ClassifyRelationService classifyRelationService;

	/**
	 * 跳转分类管理页面
	 */
	@RequestMapping("/to_classif_manager")
	public ModelAndView toClassifManager(HttpServletRequest request,ClassifyRelationView classifyRelation){
		String stamp = request.getParameter("stamp");
		String id = request.getParameter("id");
		String type = request.getParameter("type");
		String source_type = request.getParameter("source_type");
		ModelAndView modelAndView = new ModelAndView();
		try {
			if("0".equals(source_type)){
				CommunityView communityView = communityService.getById(Long.parseLong(id));
				communityView.setStamp(Integer.parseInt(stamp));
				modelAndView.addObject("communityView", communityView);
			}else if("1".equals(source_type)){
				WorkshopView workshopView = new WorkshopView();
				workshopView.setId(Long.parseLong(id));
				workshopView=workshopService.showWorkshop(workshopView).get(0);
				workshopView.setStamp(Integer.parseInt(stamp));
				modelAndView.addObject("workshopView", workshopView);
			}
			List<ClassifyRelationView> classifyList = classifyRelationService.queryAllClassify(classifyRelation);
			modelAndView.addObject("classifyList", classifyList);
			modelAndView.addObject("type", type);
			modelAndView.addObject("source_type", source_type);
			modelAndView.setViewName("frontstage/train/community/sort_management");
		} catch (Exception e) {
			log.error("社区分类列表查询失败",ExceptionUtil.getExceptionMessage(e));
		}
		return modelAndView;
	}
	
	/**
	 * 保存社区分类
	 */
	@RequestMapping("/save_classify")
	public ModelAndView saveClassify(HttpServletRequest request,ClassifyRelation classify){
		String source_id = request.getParameter("source_id");
		String stamp = request.getParameter("stamp");
		String type = request.getParameter("type");
		int source_type = classify.getSource_type();
		try {
			if(classify.getId()!=null){
				classifyRelationService.updateClassifyRelation(classify);
			}else{
				classify.setCreate_time(new Date());
				classifyRelationService.saveClassifyRelation(classify);
			}
		} catch (Exception e) {
			log.error("保存分类失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/classify_relation/to_classif_manager.action?id="+source_id+"&source_id="+source_id+"&stamp="+stamp+"&type="+type+"&source_type="+source_type);
	}
	
	@RequestMapping("query_one_classify")
	@ResponseBody
	public void queryOneClassify(Long id,HttpServletResponse response){
		JSONObject result = new JSONObject();
		try{
			ClassifyRelation classify = classifyRelationService.selectOne(id);
			result.put("classify", classify);
			ResponseUtil.write(response, result);
		}catch(Exception e){
			log.error("查询单个分类失败",ExceptionUtil.getExceptionMessage(e));
		}
	}
	
	@RequestMapping("query_classify")
	@ResponseBody
	public void queryClassifys(Long parentId,Integer sourceType,
			Integer type,HttpServletResponse response){
		JSONArray result = new JSONArray();
		try{
			List<ClassifyRelation> classifys = classifyRelationService.queryCLassifysByPid(parentId, sourceType, type);
			result.addAll(classifys);
			ResponseUtil.write(response, result);
		}catch(Exception e){
			log.error("根据pid查询子分类列表"+ExceptionUtil.getExceptionMessage(e));
		}
	}
	
	/**
	 * 删除分类
	 */
	@RequestMapping("/del_sort")
	public ModelAndView delSort(HttpServletRequest request,Long id){
		String source_id = request.getParameter("source_id");
		String source_type = request.getParameter("source_type");
		String stamp = request.getParameter("stamp");
		String type = request.getParameter("type");
		try {
			classifyRelationService.deleteClassify(id);
		} catch (Exception e) {
			log.error("删除分类失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/classify_relation/to_classif_manager.action?id="+source_id+"&source_id="+source_id+"&stamp="+stamp+"&type="+type+"&source_type="+source_type);
	}
}
