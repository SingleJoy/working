package cn.bnsr.edu_yun.frontstage.xbjy.controller;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.xbjy.po.LessonAttachment;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonAttachmentService;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonService;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonTimeService;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonUserIdentityService;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonUserTaskService;
import cn.bnsr.edu_yun.frontstage.xbjy.view.LessonAttachmentView;
import cn.bnsr.edu_yun.frontstage.xbjy.view.LessonTimeView;
import cn.bnsr.edu_yun.frontstage.xbjy.view.LessonUserTaskView;
import cn.bnsr.edu_yun.util.ConfigInfo;
import cn.bnsr.edu_yun.util.ConverPdf;
import cn.bnsr.edu_yun.util.ConvertSwf;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;

/**
 * 文件上传 下载 查看 展示
 * 
 * @author li
 * 
 */
@Controller
@RequestMapping("/lesson_attachment")
public class LessonAttachmentController {

	@Autowired
	private LessonAttachmentService lessonAttachmentService;
	@Autowired
	private LessonService lessonService;
	@Autowired
	private LessonUserTaskService lessonUserTaskService;
	@Autowired
	private LessonTimeService lessonTimeService;
	@Autowired
	private LessonUserIdentityService lessonUserIdentityService;
	private final Logger log = LoggerFactory.getLogger(LessonAttachmentController.class);

	/**
	 * 上传附件方法
	 * 
	 * @param file
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("/upload")
	public void upload(@RequestParam(value = "file", required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		User user = (User) request.getSession().getAttribute("currentUser");
		String path = request.getSession().getServletContext().getRealPath(ConfigInfo.getString("attachmentFile"));
		Date date = new Date();
		long time = date.getTime();
		Random ra = new Random();
		String fastName = "file" + time + ra.nextInt(10);
		String format = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
		String fileName = fastName + format;
		File targetFile = new File(path, fileName);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}

		// 保存
		try {
			file.transferTo(targetFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (format.equalsIgnoreCase(".pdf") || format.equalsIgnoreCase(".doc") || format.equalsIgnoreCase(".docx") || format.equalsIgnoreCase(".ppt")
				|| format.equalsIgnoreCase(".pptx") || format.equalsIgnoreCase(".xls") || format.equalsIgnoreCase(".xlsx")) {
			ConverPdf c = new ConverPdf();

			ConvertSwf cs = new ConvertSwf();
			cs.convertPdf2Swf(c.beginConvert(path, fileName, fastName), fastName + ".swf");
		}
		LessonAttachment lessonAttachment = new LessonAttachment();
		lessonAttachment.setName(file.getOriginalFilename());
		lessonAttachment.setLesson_id(Long.parseLong(request.getParameter("lesson_id")));
		lessonAttachment.setPurview(Integer.parseInt(request.getParameter("purview")));
		lessonAttachment.setUrl(targetFile.getPath());
		lessonAttachment.setUpdate_time(new Date());
		lessonAttachment.setScan_count(0);
		lessonAttachment.setUser_id(user.getId());
		lessonAttachmentService.insert(lessonAttachment);
		JSONObject result = new JSONObject();
		result.put("url", ConfigInfo.getString("file") + "/" + fileName);
		result.put("fileName", file.getOriginalFilename());
		LessonAttachmentView lessonAttachmentView = new LessonAttachmentView();
		lessonAttachmentView.setLesson_id(lessonAttachment.getLesson_id());
		lessonAttachmentView.setPurview(lessonAttachment.getPurview());
		lessonAttachmentView.setName(lessonAttachment.getName());
		SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		lessonAttachmentView.setUpdate_time(formater.format(lessonAttachment.getUpdate_time()));
		lessonAttachmentView.setScan_count(lessonAttachment.getScan_count());
		lessonAttachmentView.setId(lessonAttachment.getId());
		lessonAttachmentView.setUsername(user.getUsername());
		lessonAttachmentView.setUrl(targetFile.getPath());

		LessonUserTaskView lessonUserTaskView = new LessonUserTaskView();
		lessonUserTaskView.setUser_id(user.getId());
		lessonUserTaskView.setLesson_id(lessonAttachment.getLesson_id());
		lessonUserTaskView.setPurview(lessonAttachment.getPurview());
		lessonUserTaskView = lessonUserTaskService.findByLUP(lessonUserTaskView);
		if (lessonUserTaskView != null && lessonAttachment.getPurview() != 102) {
			lessonUserTaskView.setStatus(2);
			lessonUserTaskService.update(lessonUserTaskView);
		}
		result.put("lessonAttachmentView", lessonAttachmentView);
		ResponseUtil.write(response, result);

	}

	/**
	 * 文件下载
	 * 
	 * @param request
	 * @param response
	 * @param id
	 * @throws URISyntaxException
	 * @throws Exception
	 */
	@RequestMapping("/download")
	public void download(HttpServletRequest request, HttpServletResponse response, Long id) throws URISyntaxException, Exception {
		LessonAttachment lessonAttachment = lessonAttachmentService.selectById(id);
		final String CONTENT_TYPE = "text/plain; charset=UTF-8";
		response.setContentType(CONTENT_TYPE);
		response.setContentType("application/x-msdownload");
		File downFile = new File(lessonAttachment.getUrl());
		response.setContentLength((int) downFile.length());
		// 需要判断是什么浏览器
		String explorer = request.getParameter("explorer");
		String name = getFileName(lessonAttachment.getName(), explorer);
		response.setHeader("Content-Disposition", name);
		// 读出文件到i/o流
		FileInputStream fis = new FileInputStream(downFile);
		BufferedInputStream buff = new BufferedInputStream(fis);

		byte[] b = new byte[1024];// 相当于我们的缓存

		long k = 0;// 该值用于计算当前实际下载了多少字节

		// 从response对象中得到输出流,准备下载

		OutputStream myout = response.getOutputStream();

		// 开始循环下载

		while (k < downFile.length()) {

			int j = buff.read(b, 0, 1024);
			k += j;

			// 将b中的数据写到客户端的内存
			myout.write(b, 0, j);

		}

		// 将写入到客户端的内存的数据,刷新到磁盘
		myout.flush();
		myout.close();
		// 增加点击数

	}

	/**
	 * 删除
	 * 
	 * @param request
	 * @param response
	 * @param id
	 * @throws Exception
	 */
	@RequestMapping("/delete")
	public void delete(HttpServletRequest request, HttpServletResponse response, Long id) throws Exception {

		lessonAttachmentService.delete(id);

		JSONObject result = new JSONObject();

		ResponseUtil.write(response, result);

	}

	/**
	 * 查看，各种类型
	 * 
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping("/see")
	public ModelAndView see(HttpServletRequest request, Long id) {

		LessonAttachment lessonAttachment = lessonAttachmentService.selectById(id);
		String url = lessonAttachment.getUrl();
		url = url.replaceAll("\\\\", "/");
		String fileName = url.substring(url.lastIndexOf("/"));
		lessonAttachment.setScan_count(lessonAttachment.getScan_count() + 1);
		lessonAttachmentService.update(lessonAttachment);
		return new ModelAndView("redirect:/xbjy/attachmentFile" + fileName);

	}

	/**
	 * 展示文件列表
	 * 
	 * @param request
	 * @param lessonAttachmentView
	 * @return
	 */
	@RequestMapping("/to_lesson_attachment")
	public ModelAndView toAttachment(HttpServletRequest request, LessonAttachmentView lessonAttachmentView) {
		ModelAndView modelAndView = new ModelAndView();
		if (lessonAttachmentView.getPage() == 0) {
			lessonAttachmentView.setStartLine(0);
		} else {
			lessonAttachmentView.setStartLine(lessonAttachmentView.getPage() * lessonAttachmentView.getRows());
		}
		lessonAttachmentView.setRows(10);
		lessonAttachmentView.setUser_id(-1);
		int total = lessonAttachmentService.countAttachment(lessonAttachmentView);// 总数
		lessonAttachmentView.setTotal(total);
		// 分页总页数
		lessonAttachmentView.setTotalPage(NumUtil.totalPage(total, 10));

		List<LessonAttachmentView> lessonAttachmentViews = lessonAttachmentService.selectFileList(lessonAttachmentView);
		modelAndView.addObject("lessonAttachmentViews", lessonAttachmentViews);
		modelAndView.addObject("lessonAttachmentView", lessonAttachmentView);
		User user = (User) request.getSession().getAttribute("currentUser");
		long lesson_id = lessonAttachmentView.getLesson_id();
		boolean flag = true;// 权限
		if (user == null) {
			flag = false;
		} else {
			LessonUserTaskView lessonUserTaskView = new LessonUserTaskView();
			lessonUserTaskView.setUser_id(user.getId());
			lessonUserTaskView.setLesson_id(lesson_id);
			lessonUserTaskView.setPurview(lessonAttachmentView.getPurview());
			lessonUserTaskView = lessonUserTaskService.findByLUP(lessonUserTaskView);
			if (lessonUserTaskView == null) {
				flag = false;
			} else {
				LessonTimeView lessonTimeView = lessonTimeService.findByLesson(lessonAttachmentView.getLesson_id());
				Date start = null;
				Date end = null;
				if (lessonAttachmentView.getPurview() / 100 == 1) {
					start = lessonTimeView.getPlan_sta();
					end = lessonTimeView.getPlan_end();
				} else if (lessonAttachmentView.getPurview() / 100 == 2) {
					start = lessonTimeView.getprepare_sta();
					end = lessonTimeView.getprepare_end();
				} else if (lessonAttachmentView.getPurview() / 100 == 3) {
					start = lessonTimeView.getClass_sta();
					end = lessonTimeView.getClass_end();
				} else if (lessonAttachmentView.getPurview() / 100 == 4) {
					start = lessonTimeView.getAssessment_sta();
					end = lessonTimeView.getAssessment_end();
				} else if (lessonAttachmentView.getPurview() / 100 == 5) {
					start = lessonTimeView.getIntrospection_sta();
					end = lessonTimeView.getIntrospection_end();
				}
				if (lessonAttachmentView.getPurview() == 202) {
					modelAndView.addObject("head_title", "备课研讨会会议纪要");
				} else if (lessonAttachmentView.getPurview() == 301) {
					modelAndView.addObject("head_title", "观课准备会会议纪要");
				} else if (lessonAttachmentView.getPurview() == 302) {
					modelAndView.addObject("head_title", "观课量表");
				} else if (lessonAttachmentView.getPurview() == 304) {
					modelAndView.addObject("head_title", "提交上课实录");
				} else if (lessonAttachmentView.getPurview() == 401) {
					modelAndView.addObject("head_title", "观课报告");
				} else if (lessonAttachmentView.getPurview() == 402) {
					modelAndView.addObject("head_title", "课后评议会议纪要");
				} else if (lessonAttachmentView.getPurview() == 501) {
					modelAndView.addObject("head_title", "反思心得");
				}

				if (start == null || end == null) {
					flag = false;
				} else {
					Date date = new Date();
					if (date.getTime() < start.getTime() || date.getTime() > end.getTime() + 86400000) {
						flag = false;
					}
				}
			}
		}
		modelAndView.setViewName("frontstage/xbjy/lesson/lesson_attachment");
		modelAndView.addObject("flag", flag);

		modelAndView.addObject("lesson", lessonService.getById(lesson_id));

		String state = request.getParameter("state");
		String stamp = request.getParameter("stamp");
		request.setAttribute("state", state);
		request.setAttribute("stamp", stamp);

		// 获取课例头部统计信息
		request.setAttribute("lessonHead", lessonUserIdentityService.getLessonHead(lesson_id));
		// 获取左侧权限部分信息
		request.setAttribute("lessonLeft", lessonUserIdentityService.getLessonLeft(lesson_id, user));

		return modelAndView;
	}

	// 判断是什么浏览器
	private String getFileName(String FileName, String explorer) throws UnsupportedEncodingException {
		String name = "attachment;filename=" + FileName;
		String filename = new String(URLEncoder.encode(FileName, "UTF8"));
		if (explorer.equals("IE")) {
			name = "attachment;filename=" + filename;
		} else if (explorer.equals("Firefox")) {
			name = "attachment;filename*=UTF-8'" + filename;
		} else if (explorer.equals("Chrome")) {
			name = "attachment;filename=" + new String(filename.getBytes("UTF-8"), "ISO8859-1");
		} else if (explorer.equals("Opera")) {
			name = "attachment;filename*=UTF-8'" + filename;
		} else if (explorer.equals("Safari")) {
			name = "attachment;filename=" + new String(filename.getBytes("UTF-8"), "ISO8859-1");
		}
		return name;
	}

}
