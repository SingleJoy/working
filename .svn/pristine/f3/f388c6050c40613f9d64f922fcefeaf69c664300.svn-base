package cn.bnsr.edu_yun.frontstage.train.controller;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.Classify;
import cn.bnsr.edu_yun.frontstage.base.po.Label;
import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.po.UserInfo;
import cn.bnsr.edu_yun.frontstage.base.service.ClassifyService;
import cn.bnsr.edu_yun.frontstage.base.service.LabelService;
import cn.bnsr.edu_yun.frontstage.base.service.UserInfoService;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.base.view.ClassifyView;
import cn.bnsr.edu_yun.frontstage.base.view.UserCenterView;
import cn.bnsr.edu_yun.frontstage.train.po.Course;
import cn.bnsr.edu_yun.frontstage.train.po.CourseFile;
import cn.bnsr.edu_yun.frontstage.train.po.CourseHour;
import cn.bnsr.edu_yun.frontstage.train.po.UserClassHour;
import cn.bnsr.edu_yun.frontstage.train.po.UserStudy;
import cn.bnsr.edu_yun.frontstage.train.service.CertificateService;
import cn.bnsr.edu_yun.frontstage.train.service.ClassService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseExamStandardService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseFileService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseHourService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseInfoService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseService;
import cn.bnsr.edu_yun.frontstage.train.service.TopicQuestionService;
import cn.bnsr.edu_yun.frontstage.train.service.UserAppraiseService;
import cn.bnsr.edu_yun.frontstage.train.service.UserClassHourService;
import cn.bnsr.edu_yun.frontstage.train.service.UserStudyService;
import cn.bnsr.edu_yun.frontstage.train.view.AppraiseReasonView;
import cn.bnsr.edu_yun.frontstage.train.view.CertificatesView;
import cn.bnsr.edu_yun.frontstage.train.view.ClassMobileView;
import cn.bnsr.edu_yun.frontstage.train.view.ClassView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseCenterView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseExamStandardView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseHourMobileView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseLivingView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseMobileView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseRankView;
import cn.bnsr.edu_yun.frontstage.train.view.CourseView;
import cn.bnsr.edu_yun.frontstage.train.view.TopicQuestionMobileView;
import cn.bnsr.edu_yun.frontstage.train.view.UserAppraisView;
import cn.bnsr.edu_yun.frontstage.train.view.UserStudyView;
import cn.bnsr.edu_yun.util.ConfigInfo;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.HttpRequest;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;
import cn.bnsr.edu_yun.util.TimeUtil;
import cn.bnsr.edu_yun.util.UserLog;

/**
 * 课程
 * 
 * @author fangxiongwei
 * @date 2016年10月25日
 */
@Controller
@RequestMapping("/course")
public class CourseController {
	private final Logger log = LoggerFactory.getLogger(CourseController.class);

	@Autowired
	private CourseService courseService;
	@Autowired
	private LabelService labelService;
	@Autowired
	private UserService userService;
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private ClassifyService classifyService;
	@Autowired
	private CourseInfoService courseInfoService;
	@Autowired
	private ClassService classService;
	@Autowired
	private CertificateService certificateService;
	@Autowired
	private CourseExamStandardService courseExamStandardService;
	@Autowired
	private CourseHourService courseHourService;
	@Autowired
	private UserAppraiseService userAppraiseService;
	@Autowired
	private UserStudyService userStudyService;
	@Autowired
	private UserClassHourService userClassHourService;
	@Autowired
	private CourseFileService courseFileService;
	@Autowired
	private TopicQuestionService topicQuestionService;
	/**
	 * 跳转课程管理页面(在教课程)
	 */
	@RequestMapping("/to_course")
	public ModelAndView toCourse(HttpServletRequest request, CourseView courseView) {
		User user = (User) request.getSession().getAttribute("currentUser");
		ModelAndView modelAndView = new ModelAndView();
		String state = request.getParameter("state");
		String stamp = request.getParameter("stamp");
		try {
			courseView.setUserId(user.getId());
			courseView.setRows(10);
			if (courseView.getPage() == 0) {
				courseView.setStartLine(0);
			} else {
				courseView.setStartLine(courseView.getPage() * courseView.getRows());
			}
			List<CourseView> courseList = courseService.queryCourse(courseView);
			int total = courseService.queryTotalCourse(courseView);// 课程总数
			courseView.setTotal(total);
			// 分页总页数
			courseView.setTotalPage(NumUtil.totalPage(total, courseView.getRows()));

			modelAndView.addObject("courseList", courseList);
			modelAndView.addObject("courseView", courseView);

			UserInfo userInfo = userInfoService.getByUserId(user.getId());
			request.setAttribute("user", user);
			request.setAttribute("userInfo", userInfo);
			// 个人中心统计数据
			UserCenterView userCenter = userService.queryUserCenter(user.getId());
			modelAndView.addObject("userCenter", userCenter);

			request.setAttribute("state", state);
			request.setAttribute("stamp", stamp);
			modelAndView.addObject("head_title", "在教课程");
			modelAndView.setViewName("frontstage/train/course/teaching_course");
		} catch (Exception e) {
			log.error("课程列表查询失败", ExceptionUtil.getExceptionMessage(e));
		}
		return modelAndView;
	}

	/**
	 * 跳转创建课程页面
	 */
	@RequestMapping("/to_create_course")
	public ModelAndView toCreateCourse(HttpServletRequest request) {
		String type = request.getParameter("type");
		request.setAttribute("type", type);
		request.setAttribute("head_title", "创建课程");
		return new ModelAndView("frontstage/train/course/create_course");
	}

	/**
	 * 创建课程
	 */
	@RequestMapping("/create_course")
	public ModelAndView createCourse(HttpServletRequest request, Integer type, String title) {
		User user = (User) request.getSession().getAttribute("currentUser");
		Long courseId = null;
		try {
			String room_id = null;
			if (type == 2) {
				CourseLivingView courseLivingView = new CourseLivingView();
				courseLivingView.setName(title);
				String param = courseLivingView.getStr(courseLivingView);
				String sr = HttpRequest.sendPost("http://www.buka.tv/room/add.do", param);
				JSONObject j = JSONObject.fromObject(sr);
				System.out.println(sr);
				room_id = (Integer) j.get("room_id") + "";
			}
			courseId = courseService.createCourse(title, user.getId(), type, room_id);
			title = URLEncoder.encode(title, "utf-8");
		} catch (UnsupportedEncodingException e) {
			log.error("创建课程编码错误", ExceptionUtil.getExceptionMessage(e));
		} catch (Exception e) {
			log.error("创建课程失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}
		return new ModelAndView("redirect:/course/to_course_info.action?id=" + courseId + "&title=" + title + "&flag=0&sign=1");
	}

	/**
	 * 跳转课程基本信息页面
	 */
	@RequestMapping("/to_course_info")
	public ModelAndView toCourseInfo(HttpServletRequest request, CourseView courseView) {
		ModelAndView modelAndView = new ModelAndView();
		try {
			List<Classify> pcList = classifyService.queryByParentId(54l);// 课程父分类
			List<Classify> classifyList = classifyService.findAllClassify(1, false);// 课程子分类
			List<Label> labelList = labelService.findAllLabel(1);// 课程标签
			if (courseView.getId() != null) {
				courseView = courseService.queryCourseInfo(courseView);
			}
			if (courseView.getValidity() == null) {// 默认0不设置有效期
				courseView.setValidity(0);
			}
			modelAndView.addObject("classifyList", classifyList);
			modelAndView.addObject("pcList", pcList);
			modelAndView.addObject("labelList", labelList);
			modelAndView.addObject("courseView", courseView);
			modelAndView.addObject("head_title", "基本信息");
			modelAndView.setViewName("frontstage/train/course/course_info");
		} catch (Exception e) {
			log.error("跳转课程基本信息页面失败", ExceptionUtil.getExceptionMessage(e));
		}

		return modelAndView;
	}

	/**
	 * 保存课程基本信息
	 */
	@RequestMapping("/save_course")
	public ModelAndView saveCourse(HttpServletRequest request, CourseView courseView) {
		try {
			courseService.saveCourse(courseView);
		} catch (Exception e) {
			log.error("保存课程基本信息失败", ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/course/to_course_info.action?id=" + courseView.getId() + "&flag=1&sign=1");
	}

	/**
	 * 发布课程
	 */
	@RequestMapping("/release_course")
	public ModelAndView releaseCourse(HttpServletRequest request) {
		String id = request.getParameter("id");
		courseService.releaseCourse(id);
		return new ModelAndView("redirect:/course/to_course_info.action?id=" + id + "&flag=2&sign=1");
	}

	/**
	 * 跳转课程中心页面
	 */
	@RequestMapping("/to_course_center")
	public ModelAndView toCourseCenter(HttpServletRequest request, CourseCenterView ccv) {
		ModelAndView modelAndView = new ModelAndView();
		try {
			ccv.setRows(20);
			if (ccv.getPage() == 0) {
				ccv.setStartLine(0);
			} else {
				ccv.setStartLine(ccv.getPage() * ccv.getRows());
			}
			List<String> list = new ArrayList<String>();

			// 课程分类
			List<Classify> classifyList = classifyService.queryByParentId(54l);// 课程父分类
			if (ccv.getClassifyId() != -1) {// 选中一级分类查询二级分类
				List<Classify> sonClassifyList = classifyService.queryByParentId(ccv.getClassifyId());
				list.add(ccv.getClassifyId().toString());
				for (Classify cr : sonClassifyList) {
					list.add(cr.getId().toString());
				}
				ccv.setClassifyIds(list);
				modelAndView.addObject("sonClassifyList", sonClassifyList);
			}
			modelAndView.addObject("classifyList", classifyList);

			List<CourseCenterView> courseList = courseService.queryCourseCenter(ccv);
			int total = courseService.queryTotalCourseCenter(ccv);// 课程总数
			ccv.setTotal(total);
			// 分页总页数
			ccv.setTotalPage(NumUtil.totalPage(total, ccv.getRows()));

			modelAndView.addObject("courseList", courseList);
			modelAndView.addObject("ccv", ccv);
			modelAndView.addObject("head_title", "课程中心");
			modelAndView.setViewName("frontstage/train/course_show/course_center");
		} catch (Exception e) {
			log.error("课程中心查询失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}
		return modelAndView;
	}

	/**
	 * 异步查询课程列表
	 */
	@RequestMapping("/query_all_course")
	@ResponseBody
	public JSONArray queryAllCourse(HttpServletRequest request, CourseView courseView) {
		User user = (User) request.getSession().getAttribute("currentUser");
		try {
			courseView.setUserId(user.getId());
			courseView.setRows(7);
			if (courseView.getPage() == 0) {
				courseView.setStartLine(0);
			} else {
				courseView.setStartLine(courseView.getPage() * courseView.getRows());
			}
			if (courseView.getTitle().equals("")) {
				courseView.setTitle(null);
			}
			courseView.setType("0");// 普通课程
			if (!courseView.getIds().equals("")) {
				courseView.setList(NumUtil.getList(courseView.getIds()));
			}
			List<CourseView> courseList = courseService.queryCourse(courseView);
			int total = courseService.queryTotalCourse(courseView);// 课程总数
			courseView.setTotal(total);
			// 分页总页数
			courseView.setTotalPage(NumUtil.totalPage(total, courseView.getRows()));

			Map<String, Object> map = new HashMap<String, Object>();
			map.put("courseList", courseList);
			map.put("courseView", courseView);

			if (courseList != null) {
				return JSONArray.fromObject(map);
			}

		} catch (Exception e) {
			log.error("课程列表查询失败", ExceptionUtil.getExceptionMessage(e));
		}

		return JSONArray.fromObject(0);

	}

	/**
	 * 异步查询课程信息
	 */
	@RequestMapping("/get_by_course_ids")
	@ResponseBody
	public JSONArray getByCourseIds(HttpServletRequest request, CourseView courseView) {
		try {
			if (!courseView.getIds().equals("")) {
				courseView.setList(NumUtil.getList(courseView.getIds()));
			}
			List<CourseView> courseList = courseService.getByCourseIds(courseView.getList());
			Map<String, Object> map = new HashMap<String, Object>();

			map.put("courseList", courseList);

			if (courseList != null) {
				return JSONArray.fromObject(map);
			}
		} catch (Exception e) {
			log.error("课程列表查询失败", ExceptionUtil.getExceptionMessage(e));
		}

		return JSONArray.fromObject(0);
	}

	@RequestMapping("/to_course_center_m")
	public void toCourseCenterM(HttpServletRequest request, CourseCenterView ccv, HttpServletResponse response) {
		JSONObject result = new JSONObject();
		try {
			if (ccv.getRows() == 0)
				ccv.setRows(5);
			if (ccv.getPage() == 0) {
				ccv.setStartLine(0);
			} else {
				ccv.setStartLine(ccv.getPage() * ccv.getRows());
			}
			// 课程分类
			if (ccv.getClassifyId() == null && ccv.getSortType() == null && ccv.getStatus() == null) {
				List<ClassifyView> classifyList = classifyService.queryViewByParentId(54l);// 课程父分类
				result.put("classifyList", classifyList);
				ccv.setSortType("1");
				List<CourseCenterView> newList = courseService.queryCourseCenter(ccv);
				ccv.setSortType("2");
				List<CourseCenterView> hotList = courseService.queryCourseCenter(ccv);
				ccv.setSortType("3");
				List<CourseCenterView> recommendList = courseService.queryCourseCenter(ccv);
				result.put("newList", newList);
				result.put("hotList", hotList);
				result.put("recommendList", recommendList);
			} else if (ccv.getClassifyId() != null) {
				List<String> list = new ArrayList<String>();
				List<ClassifyView> sonClassifyList = classifyService.queryViewByParentId(ccv.getClassifyId());
				list.add(ccv.getClassifyId().toString());
				for (ClassifyView cr : sonClassifyList) {
					list.add(cr.getId().toString());
				}
				ccv.setClassifyIds(list);
				List<ClassifyView> classifyList = classifyService.queryViewByParentId(54l);// 课程父分类
				for (ClassifyView classifyView : classifyList) {
					List<ClassifyView> son = classifyService.queryViewByParentId(classifyView.getId() + 0l);
					classifyView.setSon(son);
				}
				result.put("classifyList", classifyList);
				List<CourseCenterView> courseList = courseService.queryCourseCenter(ccv);
				result.put("courseList", courseList);
			} else {
				List<ClassifyView> classifyList = classifyService.queryViewByParentId(54l);// 课程父分类
				for (ClassifyView classifyView : classifyList) {
					List<ClassifyView> son = classifyService.queryViewByParentId(classifyView.getId() + 0l);
					classifyView.setSon(son);
				}
				result.put("classifyList", classifyList);
				List<CourseCenterView> courseList = courseService.queryCourseCenter(ccv);
				result.put("courseList", courseList);
			}

			// result.put("courseCenterView", ccv);
			ResponseUtil.write(response, result);
		} catch (Exception e) {
			log.error("课程中心查询失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}

	}

	@RequestMapping("/to_classify_m")
	public void toClassifyM(HttpServletRequest request, HttpServletResponse response) {
		JSONObject result = new JSONObject();
		try {
			List<ClassifyView> classifyList = classifyService.queryViewByParentId(54l);// 课程父分类
			for (ClassifyView classifyView : classifyList) {
				List<ClassifyView> son = classifyService.queryViewByParentId(classifyView.getId() + 0l);
				classifyView.setSon(son);
			}

			result.put("classifyList", classifyList);
			ResponseUtil.write(response, result);
		} catch (Exception e) {
			log.error("课程中心查询失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}

	}

	@RequestMapping("/to_course_m")
	public void toCourseM(HttpServletRequest request, HttpServletResponse response, Long id, Long class_id, Long user_id) {
		JSONObject result = new JSONObject();
		try {
			CourseMobileView courseMobileView = new CourseMobileView();
			CourseView courseInfo = courseInfoService.queryCourseDetail(id);
			courseMobileView.setUrl("/course/to_course_m_profile.action?id=" + id);
			Course course = courseService.getById(id);
			courseMobileView.setCourse_name(course.getTitle());
			User user = userService.selectByPrimaryKey(course.getUser_id());
			courseMobileView.setUsername(user.getUsername());
			UserInfo userInfo = userInfoService.getByUserId(course.getUser_id());
			courseMobileView.setSchool(userInfo.getSchool());
			courseMobileView.setImg(courseInfo.getImg());
			ClassView classView = new ClassView();
			classView.setPaging("0");// 不分页
			classView.setStatus(5);
			classView.setState(0);
			classView.setSource_id(id);
			classView.setSource_type(0);
			int isJoin=0;
			if (user_id != null) {
				UserStudyView userStudyView=new UserStudyView();
				userStudyView.setSourceType("0");
				userStudyView.setUserId(user_id+"");
				userStudyView.setLearnId(id+"");
				List<UserStudy> usList = userStudyService.searchUserStudy(userStudyView);
				// 默认第一个班级
				if(usList.size()>0){
				UserStudy userStudy = usList.get(0);
				userStudyView.setId(userStudy.getId().toString());
				class_id = userStudy.getSource_id();
				isJoin=1;
				}
			}

			if (class_id == null) {
				List<ClassView> classList = classService.find(classView);
				if (classList != null) {
					classView = classList.get(0);
					courseMobileView.setClass_name(classView.getName());
					courseMobileView.setClass_id(classView.getId());
					courseMobileView.setPrice(classView.getPrice());
					Date end = classView.getClose_time();
					Date start = classView.getOpen_time();
					int valid_date = TimeUtil.getBetweenDates(start, end).size();
					courseMobileView.setValid_date(valid_date);
					courseMobileView.setEndTime(TimeUtil.dateToString1(end));
					courseMobileView.setStartTime(TimeUtil.dateToString1(start));
					courseMobileView.setLastTime(TimeUtil.dateToString2(classView.getEnd_time()));
				}
			} else {
				classView = classService.selectOne(class_id, 0);
				if (classView != null) {
					courseMobileView.setClass_name(classView.getName());
					courseMobileView.setClass_id(class_id);
					courseMobileView.setPrice(classView.getPrice());
					Date end = classView.getClose_time();
					Date start = classView.getOpen_time();
					int valid_date = TimeUtil.getBetweenDates(start, end).size();
					courseMobileView.setValid_date(valid_date);
					courseMobileView.setEndTime(TimeUtil.dateToString1(end));
					courseMobileView.setStartTime(TimeUtil.dateToString1(start));
					courseMobileView.setLastTime(TimeUtil.dateToString2(classView.getEnd_time()));
					
				}
			}
			result.put("isJoin", isJoin);
			result.put("courseView", courseMobileView);
			ResponseUtil.write(response, result);
		} catch (Exception e) {
			log.error("课程中心查询失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}

	}

	@RequestMapping("/to_course_m_profile")
	public ModelAndView toCourseMProfile(HttpServletRequest request, long id) {
		ModelAndView modelAndView = new ModelAndView();
		CourseView courseInfo = courseInfoService.queryCourseDetail(id);
		modelAndView.setViewName("frontstage/train/course_show/course_intro");
		modelAndView.addObject("courseInfo", courseInfo);
		CertificatesView certificatesView = new CertificatesView();
		certificatesView.setSource_id(courseInfo.getId().toString());
		certificatesView.setSource_type("1");
		List<CertificatesView> certificatesViews = certificateService.findAll(certificatesView);
		modelAndView.addObject("certificatesViews", certificatesViews);// 证书情况

		CourseExamStandardView examStandardView = new CourseExamStandardView();
		examStandardView.setCourse_id(courseInfo.getId().toString());
		examStandardView.setSource_type("0");
		modelAndView.addObject("jobStandard", courseExamStandardService.queryStandard(examStandardView));
		examStandardView.setSource_type("1");
		modelAndView.addObject("discussionStandard", courseExamStandardService.queryStandard(examStandardView));
		examStandardView.setSource_type("2");
		modelAndView.addObject("examStandard", courseExamStandardService.queryStandard(examStandardView));

		return modelAndView;
	}

	@RequestMapping("/to_class_m")
	public void toClassM(HttpServletRequest request, HttpServletResponse response, Long id) throws Exception {
		JSONObject result = new JSONObject();
		ClassView classView = new ClassView();
		List<ClassMobileView> classMoblieList = new ArrayList<ClassMobileView>();
		classView.setPaging("0");// 不分页
		classView.setStatus(5);
		classView.setState(0);
		classView.setSource_id(id);
		classView.setSource_type(0);
		List<ClassView> classList = classService.find(classView);
		for (ClassView c : classList) {
			ClassMobileView classMobileView = new ClassMobileView();
			classMobileView.setClass_name(c.getName());
			Date end = c.getClose_time();
			Date start = c.getOpen_time();
			int valid_date = TimeUtil.getBetweenDates(start, end).size();
			classMobileView.setValid_date(valid_date);
			classMobileView.setClass_id(c.getId());
			classMobileView.setLastTime(TimeUtil.dateToString2(c.getEnd_time()));
			classMoblieList.add(classMobileView);
		}
		result.put("classList", classMoblieList);
		ResponseUtil.write(response, result);
	}

	@RequestMapping("/to_course_hour_m")
	public void toCourseHourM(HttpServletRequest request, HttpServletResponse response, Long id) throws Exception {
		JSONObject result = new JSONObject();
		List<CourseHourMobileView> courseHourMobileViews = new ArrayList<CourseHourMobileView>();
		List<CourseHour> courseHours = courseHourService.queryHourList(id, true);
		int i = 1;
		for (CourseHour c : courseHours) {
			CourseHourMobileView courseHourMobileView = new CourseHourMobileView();
			courseHourMobileView.setId(c.getId());
			courseHourMobileView.setTitle(c.getHour_title());
			courseHourMobileView.setSeq(i++);
			List<CourseHour> courseHours2 = courseHourService.queryHourListByPid(c.getId());
			List<CourseHourMobileView> son = new ArrayList<CourseHourMobileView>();
			int j = 1;
			for (CourseHour ch : courseHours2) {
				CourseHourMobileView courseHourMobileView1 = new CourseHourMobileView();
				courseHourMobileView1.setId(ch.getId());
				courseHourMobileView1.setTitle(ch.getHour_title());
				courseHourMobileView1.setSeq(j++);
				if (ch.getAttribute_type() == 2) {
					if (ch.getHour_type() != null && ch.getHour_type() == 1) {
						courseHourMobileView1.setStatus("1");
					} else {
						courseHourMobileView1.setStatus("2");
					}
				} else {
					courseHourMobileView1.setStatus(ch.getAttribute_type() + "");
				}
				son.add(courseHourMobileView1);
			}
			courseHourMobileView.setSonList(son);
			courseHourMobileViews.add(courseHourMobileView);
		}
		result.put("courseHourView", courseHourMobileViews);
		ResponseUtil.write(response, result);
	}

	@RequestMapping("/to_course_apprise_m")
	public void toCourseAppriseM(HttpServletRequest request, HttpServletResponse response, Long id) throws Exception {
		JSONObject result = new JSONObject();
		List<UserAppraisView> appraise = userAppraiseService.selectBySourceId(id, 0, 0, 0);
		result.put("appraise", appraise);
		// 评价项
		AppraiseReasonView appraiseReasonView = new AppraiseReasonView();
		long totalAppraise = userAppraiseService.selectCountBySourceId(id, 0);
		Integer totalScore = userAppraiseService.selectTotalScore(id, 0);
		result.put("total", totalAppraise);
		if (totalAppraise != 0 && totalScore != null) {
			double score = totalScore * 1.0;
			result.put("average", score / totalAppraise);
		} else {
			result.put("average", 0);
		}
		appraiseReasonView.setType(0);
		appraiseReasonView.setLevel(5);
		appraiseReasonView.setSource_id(id);
		List<AppraiseReasonView> appraiseReasonViews = userAppraiseService.selectByType(appraiseReasonView);
		result.put("reason", appraiseReasonViews);
		ResponseUtil.write(response, result);
	}
	/**
	 * 
	 * 用户手机加入课程班级
	 */
	@UserLog(description = "加入学习")
	@RequestMapping("/join_study_m")
	public void joinStudy(HttpServletResponse response, HttpServletRequest request,Long user_id,Long class_id  ) {
		JSONObject result = new JSONObject();
		try {
			User user = userService.selectByPrimaryKey(user_id);
			ClassView classView = classService.selectOne(class_id, null);
		
			// 加入学习
			// userStudyService.joinStudy(classView, user);
			
			boolean isJoin = userStudyService.joinStudy(classView, user);
			result.put("msg", isJoin);
			
			ResponseUtil.write(response, result);
		} catch (Exception e) {
			e.printStackTrace();
			log.error("加入学习失败", ExceptionUtil.getExceptionMessage(e));
		}

	}
	@RequestMapping("/to_user_study_m")
	public void toUserStudyM(HttpServletRequest request, HttpServletResponse response, Long id, Long class_id, Long user_id) {
		JSONObject result = new JSONObject();
		try {
			CourseMobileView courseMobileView = new CourseMobileView();
			CourseView courseInfo = courseInfoService.queryCourseDetail(id);
			Course course = courseService.getById(id);
			courseMobileView.setCourse_name(course.getTitle());
			User user = userService.selectByPrimaryKey(course.getUser_id());
			courseMobileView.setUsername(user.getUsername());
			UserInfo userInfo = userInfoService.getByUserId(course.getUser_id());
			courseMobileView.setSchool(userInfo.getSchool());
			courseMobileView.setImg(courseInfo.getImg());
			ClassView classView = new ClassView();
			classView.setPaging("0");// 不分页
			classView.setStatus(5);
			classView.setState(0);
			classView.setSource_id(id);
			classView.setSource_type(0);
			if (class_id != null) {
				classView = classService.selectOne(class_id, 0);
				if (classView != null) {
					courseMobileView.setClass_name(classView.getName());
					courseMobileView.setClass_id(class_id);
					courseMobileView.setPrice(classView.getPrice());
					Date end = classView.getEnd_time();
					Date start = classView.getOpen_time();
					int valid_date = TimeUtil.getBetweenDates(start, end).size();
					courseMobileView.setValid_date(valid_date);
					courseMobileView.setEndTime(TimeUtil.dateToString1(end));
					courseMobileView.setStartTime(TimeUtil.dateToString1(start));
				}
			}
			UserClassHour userClassHour = new UserClassHour();
			userClassHour.setCourse_id(id);
			userClassHour.setUser_id(user_id);
			userClassHour.setClass_id(class_id);
			// 所有课时的数
			int allNum = userClassHourService.selectCountByCourseIdAndUserId(userClassHour);
			result.put("allNum", allNum);
			// 已学课时数
			int studyNum = userClassHourService.selectCountByCourseIdAndUserIdStudy(userClassHour);
			result.put("studyNum", studyNum);
			result.put("courseView", courseMobileView);
			
			List<CourseHourMobileView> courseHourMobileViews = new ArrayList<CourseHourMobileView>();
			List<CourseHour> courseHours = courseHourService.queryHourList(id, true);
			int i = 1;
			long nextId=0;
			for (CourseHour c : courseHours) {
				CourseHourMobileView courseHourMobileView = new CourseHourMobileView();
				courseHourMobileView.setId(c.getId());
				courseHourMobileView.setTitle(c.getHour_title());
				courseHourMobileView.setSeq(i++);
				List<CourseHour> courseHours2 = courseHourService.queryHourListByPid(c.getId());
				List<CourseHourMobileView> son = new ArrayList<CourseHourMobileView>();
				int j = 1;
				for (CourseHour ch : courseHours2) {
					CourseHourMobileView courseHourMobileView1 = new CourseHourMobileView();
					userClassHour.setCourse_hour_id(ch.getId());
					UserClassHour userClassHour1 = userClassHourService.selectByHourId(userClassHour);
					if(userClassHour1==null){
						continue;
					}
					if(i==1&&j==1){
						nextId= ch.getId();
					}
					courseHourMobileView1.setIs_studyed(userClassHour1.getIs_studyed());
					courseHourMobileView1.setId(ch.getId());
					courseHourMobileView1.setTitle(ch.getHour_title());
					courseHourMobileView1.setSeq(j++);
					if (ch.getAttribute_type() == 2) {
						if (ch.getHour_type() != null && ch.getHour_type() == 1) {
							courseHourMobileView1.setStatus("1");
						} else {
							courseHourMobileView1.setStatus("2");
						}
					} else {
						courseHourMobileView1.setStatus(ch.getAttribute_type() + "");
					}
					son.add(courseHourMobileView1);
				}
				courseHourMobileView.setSonList(son);
				courseHourMobileViews.add(courseHourMobileView);
			}
			result.put("courseHourView", courseHourMobileViews);
			UserClassHour uch = userClassHourService.selectByNextStudy(userClassHour);
			if (uch != null) {
				String hour_id = uch.getCourse_hour_id() + "";
				CourseHour	nextCourseHour = courseHourService.getHour(hour_id);
				result.put("nextHour", nextCourseHour.getHour_title());
				result.put("nextId", nextCourseHour.getId());
			}else{
				result.put("nextId",nextId);
			}
			CourseRankView courseRankView = new CourseRankView();
			courseRankView.setCourse_id(id);
			courseRankView.setClassId(class_id);
			List<CourseRankView> courseRankViews = userClassHourService.paceRank(courseRankView);
			result.put("rankView", courseRankViews);
			
			ResponseUtil.write(response, result); 
		} catch (Exception e) {
			log.error("课程中心查询失败", ExceptionUtil.getExceptionMessage(e));
			e.printStackTrace();
		}

	}
	@RequestMapping("/to_study_m")
	public ModelAndView to_study(CourseHour courseHour, HttpServletResponse response, HttpServletRequest request,  Long class_id) throws Exception {
		ModelAndView modelAndView = new ModelAndView("frontstage/train/course/app_living");
		Long user_id=courseHour.getUser_id();
		courseHour = courseHourService.getHour(courseHour.getId() + "");
		CourseFile courseFile = courseFileService.selectByKey(courseHour.getCourse_file_id());
		modelAndView.addObject("courseFile", courseFile);
		modelAndView.addObject("file_server_path", ConfigInfo.getString("file_server_path"));
		Long id=courseHour.getCourse_id();
		List<CourseHourMobileView> courseHourMobileViews = new ArrayList<CourseHourMobileView>();
		List<CourseHour> courseHours = courseHourService.queryHourList(id, true);
		int i = 1;
		UserClassHour userClassHour = new UserClassHour();
		userClassHour.setCourse_id(id);
		userClassHour.setUser_id(user_id);
		userClassHour.setClass_id(class_id);
		for (CourseHour c : courseHours) {
			CourseHourMobileView courseHourMobileView = new CourseHourMobileView();
			courseHourMobileView.setId(c.getId());
			courseHourMobileView.setTitle(c.getHour_title());
			courseHourMobileView.setSeq(i++);
			List<CourseHour> courseHours2 = courseHourService.queryHourListByPid(c.getId());
			List<CourseHourMobileView> son = new ArrayList<CourseHourMobileView>();
			int j = 1;
			for (CourseHour ch : courseHours2) {
				CourseHourMobileView courseHourMobileView1 = new CourseHourMobileView();
				userClassHour.setCourse_hour_id(ch.getId());
				UserClassHour userClassHour1 = userClassHourService.selectByHourId(userClassHour);
				if(userClassHour1==null){
					continue;
				}
				
				courseHourMobileView1.setIs_studyed(userClassHour1.getIs_studyed());
				courseHourMobileView1.setId(ch.getId());
				courseHourMobileView1.setTitle(ch.getHour_title());
				courseHourMobileView1.setSeq(j++);
				if (ch.getAttribute_type() == 2) {
					if (ch.getHour_type() != null && ch.getHour_type() == 1) {
						courseHourMobileView1.setStatus("1");
					} else {
						courseHourMobileView1.setStatus("2");
					}
				} else {
					courseHourMobileView1.setStatus(ch.getAttribute_type() + "");
				}
				son.add(courseHourMobileView1);
			}
			courseHourMobileView.setSonList(son);
			courseHourMobileViews.add(courseHourMobileView);
		}
		modelAndView.addObject("userClassHour", userClassHour);
		modelAndView.addObject("courseHour", courseHour);
		modelAndView.addObject("courseHourMobileViews", courseHourMobileViews);
		return modelAndView;
	}
	
	@RequestMapping("/to_question_m")
	public void toQuestionM(HttpServletRequest request, HttpServletResponse response, long source_id,int source_type,Long user_id,Integer type) throws Exception {
		JSONObject result = new JSONObject();
		List<TopicQuestionMobileView> topicQuestionMobileViews= topicQuestionService.selectByCourseIdM(source_id, source_type, user_id, type);
		result.put("topicQuestions", topicQuestionMobileViews);
		
		ResponseUtil.write(response, result); 
	}
	
}
