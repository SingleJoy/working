package cn.bnsr.edu_yun.backstage.resource.service.impl;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import cn.bnsr.edu_yun.backstage.base.view.DataGrid;
import cn.bnsr.edu_yun.backstage.resource.service.BackFileAnalyzeService;
import cn.bnsr.edu_yun.backstage.resource.view.BackFileView;
import cn.bnsr.edu_yun.backstage.resource.view.FileStatsView;
import cn.bnsr.edu_yun.comparator.ResourceStatsComparator;
import cn.bnsr.edu_yun.frontstage.resource.mapper.File_baseMapper;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.TimeUtil;

public class BackFileAnalyzeServiceImpl implements BackFileAnalyzeService {

	@Autowired
	private File_baseMapper fileBaseMapper;
	@Override
	public DataGrid datagrid(BackFileView backFileView) {
		DataGrid j = new DataGrid();
		backFileView.setPage(NumUtil.startingNum(backFileView.getPage(), backFileView.getRows()));
		j.setRows(find(backFileView));
		j.setTotal(total(backFileView));
		return j;
	}
	
	private List<BackFileView> find(BackFileView backFileView) {
		return fileBaseMapper.findGeneral(backFileView);
	}

	private Long total(BackFileView backFileView) {
		return fileBaseMapper.countGeneral(backFileView);
	}

	@Override
	public List<FileStatsView> queryfileTrend(FileStatsView fileStats) throws ParseException{
		List<FileStatsView> fileStatsList = new ArrayList<FileStatsView>();
		List<String> timelist = new ArrayList<String>();
		List<String> alldays = new ArrayList<String>();
		int timeUnit = fileStats.getTimeUnit();
		String logType = fileStats.getLogType();
		Integer compare = fileStats.getCompare();
		if (timeUnit == 0) {// 按时
			String[] hourlist = TimeUtil.getHourList();
			for (int i = 0; i < hourlist.length; i++) {
				FileStatsView fileStats1 = new FileStatsView();
				fileStats1.setDays(hourlist[i]);
				fileStatsList.add(fileStats1);
			}
		} else if (timeUnit == 1) {// 按天
			// 选择某一天和一段时间一定分开
			if (fileStats.getDays() != null && fileStats.getDays() != "") {// 某一天
				FileStatsView fileStats1 = new FileStatsView();
				fileStats1.setDays(fileStats.getDays());
				fileStats1.setSort(1);// 按天排序
				fileStatsList.add(fileStats1);
			}
		}
		if (fileStats.getStartTime() != null && fileStats.getEndTime() != null && fileStats.getStartTime() != ""
				&& fileStats.getEndTime() != "") {// 一段时间
			if (timeUnit != 0) {// 不是按时，timelist才有意义
				alldays = TimeUtil.getBetweenDates(TimeUtil.stringFormatDate1(fileStats.getStartTime()),
						TimeUtil.afterNDay(TimeUtil.stringFormatDate1(fileStats.getEndTime()), 1));
			}
			if (timeUnit == 1) {// 按天
				// 选择某一天和一段时间一定分开
				timelist = alldays;
			} else if (timeUnit == 2) {// 按周
				timelist = TimeUtil.getMonday(alldays);// 获取所有日期所在的星期一的日期
			} else if (timeUnit == 3) {// 按月
				timelist = TimeUtil.getFirstdayofmouth(fileStats.getStartTime(), fileStats.getEndTime());// 获取时间段内的每月的第一天
			}
			if (timeUnit != 0) {// 小时的list和date的list已不同
				timelist.set(0, fileStats.getStartTime());// 默认初始时间是起始时间
				for (int i = 0; i < timelist.size(); i++) {
					FileStatsView fileStats1 = new FileStatsView();
					fileStats1.setDays(timelist.get(i));
					fileStats1.setSort(1);// 按天排序
					fileStatsList.add(fileStats1);
				}
			}
			fileStats.setEndTime(TimeUtil.afterNDay(fileStats.getEndTime(), 1));
		}
		List<FileStatsView> fileList = fileBaseMapper.queryFileStatic(fileStats);
		if (fileList.size() > 0 && (timeUnit == 2 || timeUnit == 3)) {// 按周或按月
			if(fileList.get(0).getDays().equals(timelist.get(0))){
				fileList.get(0).setDays(fileStats.getStartTime()); 
			}
		}
		// 组装
		// 平均同时在线人数、在线峰值
		for (FileStatsView f : fileList) {
			for (FileStatsView f1 : fileStatsList) {
				if (f1.getDays().equals(f.getDays())) {
					f1.setBuyNum(f.getBuyNum());
					f1.setClickNum(f.getClickNum());
					f1.setCollectionNum(f.getCollectionNum());
					f1.setDownLoadNum(f.getDownLoadNum());
					f1.setUploadNum(f.getUploadNum());
				}
			}
		}
		if (compare != null && logType.length() == 1) {// 有比较
			if (fileStats.getDays() != null && fileStats.getDays().length() > 0) {// 某一天
				if (compare == 0) {// 对比前一日
					fileStats.setDays(TimeUtil.afterNDay(fileStats.getDays(), -1));
				} else if (compare == 1) {// 对比上一周期
					fileStats.setDays(TimeUtil.afterNDay(fileStats.getDays(), -7));
				}
			} else if (fileStats.getStartTime() != null && fileStats.getEndTime() != null
					&& fileStats.getStartTime() != "" && fileStats.getEndTime() != "") {// 一段时间
				if (compare == 0) {// 对比前一日
					fileStats.setStartTime(TimeUtil.afterNDay(fileStats.getStartTime(), -1));
					fileStats.setEndTime(TimeUtil.afterNDay(fileStats.getEndTime(), -1));
				} else if (compare == 1) {// 对比上一周期
					fileStats.setStartTime(TimeUtil.afterNDay(fileStats.getStartTime(), -7));
					fileStats.setEndTime(TimeUtil.afterNDay(fileStats.getEndTime(), -7));
				}
			}
			List<FileStatsView> fileCompareList = fileBaseMapper.queryFileStatic(fileStats);
			// 组装比较
			for (FileStatsView f : fileStatsList) {
				for (FileStatsView f1 : fileCompareList) {
					if(timeUnit==0){//按时
						if (f.getDays().equals(f1.getDays())) {
							if ("0".equals(logType)) {//下载量
								f.setNewNum2(f1.getDownLoadNum());
							} else if ("1".equals(logType)) {// 收藏量
								f.setNewNum2(f1.getCollectionNum());
							}else if ("2".equals(logType)) {// 点击浏览量
								f.setNewNum2(f1.getClickNum());
							}else if ("3".equals(logType)) {// 购买数量
								f.setNewNum2(f1.getBuyNum());
							}
						}
					}else if(timeUnit==1){//按日
						if (compare == 0 && TimeUtil.afterNDay(f.getDays(), -1).equals(f1.getDays())) {// 对比前一日
							f.setOneDay(f1.getDays());
							if (logType.equals("0")) {// 下载量
								f.setNewNum2(f1.getDownLoadNum());
							} else if (logType.equals("1")) {// 收藏量
								f.setNewNum2(f1.getCollectionNum());
							} else if (logType.equals("2")) {// 点击浏览量
								f.setNewNum2(f1.getClickNum());
							} else if (logType.equals("3")) {// 购买数量
								f.setNewNum2(f1.getBuyNum());
							} 
						} else if (compare == 1 && TimeUtil.afterNDay(f.getDays(), -7).equals(f1.getDays())) {// 对比上一周期
							f.setOneDay(f1.getDays());
							if (logType.equals("0")) {// 下载量
								f.setNewNum2(f1.getDownLoadNum());
							} else if (logType.equals("1")) {// 收藏量
								f.setNewNum2(f1.getCollectionNum());
							} else if (logType.equals("2")) {// 点击浏览量
								f.setNewNum2(f1.getClickNum());
							} else if (logType.equals("3")) {// 购买数量
								f.setNewNum2(f1.getBuyNum());
							} 
						}
					}
				}
			}
		}
		
		Collections.sort(fileStatsList, new ResourceStatsComparator());// 排序
		return fileStatsList;
	}

}
