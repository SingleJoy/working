package cn.bnsr.edu_yun.frontstage.train.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import cn.bnsr.edu_yun.backstage.train.view.UserAppraiseView;
import cn.bnsr.edu_yun.frontstage.train.po.UserAppraise;
import cn.bnsr.edu_yun.frontstage.train.view.UserAppraisView;

public interface UserAppraiseMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int insert(UserAppraise record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int insertSelective(UserAppraise record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    UserAppraise selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int updateByPrimaryKeySelective(UserAppraise record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int updateByPrimaryKeyWithBLOBs(UserAppraise record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_appraise
     *
     * @mbggenerated Thu Jan 19 09:40:07 CST 2017
     */
    int updateByPrimaryKey(UserAppraise record);
    
    UserAppraiseView getById(@Param("id")Long id,@Param("source_type")Integer source_type);//次查询会多表连接，故分开

	long selectCountBySourceId(@Param("sourceId")long sourceId,@Param("sourceType")int sourceType);
    
    List<UserAppraisView>  selectBySourceId(@Param("sourceId")long sourceId,@Param("start")long start,@Param("pageSize")long pageSize,@Param("sourceType")int sourceType);
    
    UserAppraise selectByCourseIdAndUserId(@Param("user_id")long user_id,@Param("source_id")long source_id,@Param("source_type")int source_type);
     
    //后台
    List<UserAppraiseView> search(UserAppraiseView cev);
    
    Long count(UserAppraiseView cev);

    Integer selectTotalScore(@Param("sourceId")long sourceId,@Param("sourceType")int sourceType);


}