package cn.bnsr.edu_yun.frontstage.train.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.po.UserInfo;
import cn.bnsr.edu_yun.frontstage.base.service.UserInfoService;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.base.view.UserCenterView;
import cn.bnsr.edu_yun.frontstage.train.po.Course;
import cn.bnsr.edu_yun.frontstage.train.po.Train;
import cn.bnsr.edu_yun.frontstage.train.po.UserCollect;
import cn.bnsr.edu_yun.frontstage.train.po.UserStudyRecord;
import cn.bnsr.edu_yun.frontstage.train.service.ClassService;
import cn.bnsr.edu_yun.frontstage.train.service.CourseService;
import cn.bnsr.edu_yun.frontstage.train.service.TrainService;
import cn.bnsr.edu_yun.frontstage.train.service.UserCollectService;
import cn.bnsr.edu_yun.frontstage.train.service.UserStudyRecordService;
import cn.bnsr.edu_yun.frontstage.train.view.UserCollectView;
import cn.bnsr.edu_yun.frontstage.xbjy.po.Lesson;
import cn.bnsr.edu_yun.frontstage.xbjy.service.LessonService;
import cn.bnsr.edu_yun.frontstage.xbjy.view.LessonView;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;

/**
 * 用户收藏
 * @author fangxiongwei
 * @date 2017年2月23日
 */
@Controller
@RequestMapping("user_collect")
public class UserCollectController {
	private final Logger log = LoggerFactory.getLogger(UserCollectController.class);
	
	@Autowired
	private UserCollectService userCollectService;
	@Autowired
	private UserStudyRecordService userStudyRecordService;
	@Autowired
	private CourseService courseService;
	@Autowired
	private TrainService trainService;
	@Autowired
	private ClassService classService;
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private UserService userService;
	@Autowired
	private LessonService lessonService;
	
	/**
	 * 我的收藏
	 */
	@RequestMapping("/to_user_collect")
	public ModelAndView toUserCollect(HttpServletRequest request,UserCollectView userCollectView) {
		User user = (User) request.getSession().getAttribute("currentUser");
		ModelAndView modelAndView = new ModelAndView();
		String state = request.getParameter("state");
		String stamp = request.getParameter("stamp");
		try {
			userCollectView.setRows(6);
			if (userCollectView.getPage() == 0) {
				userCollectView.setStartLine(0);
			} else {
				userCollectView.setStartLine(userCollectView.getPage() * userCollectView.getRows());
			}
			userCollectView.setUserId(user.getId());
			Integer total = userCollectService.countMyCollect(userCollectView);
			userCollectView.setTotal(total);
			userCollectView.setTotalPage(NumUtil.totalPage(total, 6));
			List<UserCollectView> userCollectList = userCollectService.queryMyCollect(userCollectView);
			modelAndView.addObject("userCollectList", userCollectList);
			modelAndView.addObject("userCollectView", userCollectView);
			if(userCollectView.getSource_type()==2){
				List<LessonView> lessonList=new ArrayList<LessonView>();
				for(UserCollectView u:userCollectList){
				LessonView lessonView = lessonService.queryLessonView(u.getId());
					lessonList.add(lessonView);
				}
				modelAndView.addObject("lessonList", lessonList);
			}
			UserInfo userInfo = userInfoService.getByUserId(user.getId());
			request.setAttribute("user", user);
			request.setAttribute("userInfo", userInfo);
			//个人中心统计数据  
			UserCenterView userCenter = userService.queryUserCenter(user.getId());
			modelAndView.addObject("userCenter", userCenter);
			
			request.setAttribute("state", state);
			request.setAttribute("stamp", stamp);
			modelAndView.addObject("head_title", "我的收藏");
			modelAndView.setViewName("frontstage/train/personalCenter/user_collect");
		} catch (Exception e) {
			e.printStackTrace();
			log.error("跳转我的收藏失败", ExceptionUtil.getExceptionMessage(e));
		}
		return modelAndView;
	}
	
	/**
	 *收藏
	 */
	@RequestMapping("/collect")
	public void collect(UserCollect userCollect,HttpServletResponse response,HttpServletRequest request) throws Exception{
			
		User user = (User) request.getSession().getAttribute("currentUser");
		userCollect.setUser_id(user.getId());
		//查看是否收藏过
		UserCollect uc = userCollectService.selectByCourseIdAndUserId(userCollect);
		JSONObject result=new JSONObject();
		if(uc==null){
			userCollect.setCollect_time(new Date());
			userCollectService.insert(userCollect);
			UserStudyRecord record = new UserStudyRecord();
			result.put("msg", 1);
			record.setUser_id(user.getId());
			record.setLearn_id(userCollect.getLearn_id());
			record.setSource_id(userCollect.getSource_id());
			record.setSource_type(userCollect.getSource_type());
			record.setCreate_time(userCollect.getCollect_time());
			cn.bnsr.edu_yun.frontstage.train.po.Class cla = classService.getById(userCollect.getSource_id());
			if(userCollect.getSource_type()==0){
				record.setMsg("收藏了课程班级");
				Course course=courseService.getById(userCollect.getLearn_id());
				record.setSource_name(course.getTitle()+"("+cla.getName()+")");
				userStudyRecordService.saveUserStudyRecord(record);
			}else if(userCollect.getSource_type()==1){
				record.setMsg("收藏了培训班级");
				Train train= trainService.getById(userCollect.getLearn_id());
				record.setSource_name(train.getName()+"("+cla.getName()+")");
				userStudyRecordService.saveUserStudyRecord(record);
			}else{
				record.setMsg("收藏了课例");
				Lesson lesson=lessonService.getById(userCollect.getSource_id());
				record.setSource_name(lesson.getName());
				userStudyRecordService.saveUserStudyRecord(record);
			}
		}else{
			userCollectService.delete(uc.getId());
			result.put("msg", 2);
		}
		ResponseUtil.write(response, result);
	}
	
}
