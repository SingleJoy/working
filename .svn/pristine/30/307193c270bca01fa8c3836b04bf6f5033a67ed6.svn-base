package cn.bnsr.edu_yun.frontstage.train.controller;

import java.io.File;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.train.po.StudentRelation;
import cn.bnsr.edu_yun.frontstage.train.po.Workshop;
import cn.bnsr.edu_yun.frontstage.train.service.CommunityService;
import cn.bnsr.edu_yun.frontstage.train.service.StudentRelationService;
import cn.bnsr.edu_yun.frontstage.train.service.WorkshopService;
import cn.bnsr.edu_yun.frontstage.train.view.CommunityView;
import cn.bnsr.edu_yun.frontstage.train.view.StudentRelationView;
import cn.bnsr.edu_yun.frontstage.train.view.TeacherRelationView;
import cn.bnsr.edu_yun.frontstage.train.view.WorkshopView;
import cn.bnsr.edu_yun.util.ConfigInfo;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.ExportExcel;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ReadExcel;
import cn.bnsr.edu_yun.util.ResponseUtil;
import net.sf.json.JSONObject;

/**
 * 用户（社区，工作坊）
 * @author sunyu
 * @date 2017年5月18日
 */
@Controller
@RequestMapping("/student_relation")
public class StudentRelationController {
	private final Logger log = LoggerFactory.getLogger(StudentRelationController.class);
	@Autowired
	private CommunityService communityService;
	@Autowired
	private WorkshopService workShopService;
	@Autowired
	private StudentRelationService studentRelationService; 
	@Autowired
	private UserService userService;

	/**
	 * 跳转用户管理页面（社区、工作坊）
	 */
	@RequestMapping("/to_student_relation_manager")
	public ModelAndView toStudentRelationManager(HttpServletRequest request,StudentRelationView student){
		String id = request.getParameter("id");
		String stamp = request.getParameter("stamp");
		String source_type = request.getParameter("source_type");
		ModelAndView modelAndView = new ModelAndView();
		try {
			if("0".equals(source_type)){
				CommunityView communityView = communityService.getById(Long.parseLong(id));
				communityView.setStamp(Integer.parseInt(stamp));
				modelAndView.addObject("communityView", communityView);
			}else if("1".equals(source_type)){
				WorkshopView workshopView = new WorkshopView();
				workshopView.setId(Long.parseLong(id));
				workshopView=workShopService.showWorkshop(workshopView).get(0);
				workshopView.setStamp(Integer.parseInt(stamp));
				modelAndView.addObject("workshopView", workshopView);
			}
			student.setRows(10);
			if (student.getPage() == 0) {
				student.setStartLine(0);
			} else {
				student.setStartLine(student.getPage() * student.getRows());
			}
			Integer total = studentRelationService.countStudent(student);
			student.setTotal(total);
			// 分页总数
			student.setTotalPage(NumUtil.totalPage(total, student.getRows()));
			List<StudentRelationView> studentList = studentRelationService.findAll(student);
			modelAndView.addObject("studentList", studentList);
			modelAndView.addObject("studentRelationView", student);
			modelAndView.addObject("source_type", source_type);
			modelAndView.setViewName("frontstage/train/community/user_management");
		} catch (Exception e) {
			log.error("社区用户列表查询失败",ExceptionUtil.getExceptionMessage(e));
		}
		return modelAndView;
	}
	/**
	 * 验证学员是否已存在（社区、工作坊）
	 */
	@RequestMapping("/verify_student")
	@ResponseBody
	public JSONObject verifyStudent(StudentRelationView student) {
		JSONObject num = new JSONObject();
		num.put("source_type", student.getSource_type());
		num.put("num", studentRelationService.countStudent(student));
		return num;
	}

	/**
	 * 保存学员（社区、工作坊）
	 */
	@RequestMapping("/save_student")
	public ModelAndView saveStudent(HttpServletRequest request,StudentRelation student){
		String source_id = request.getParameter("source_id");
		String stamp = request.getParameter("stamp");
		int source_type = student.getSource_type();
		try {
			if(student.getId()!=null){
				studentRelationService.updateStudentRelation(student);
			}else{
				studentRelationService.saveStudentRelation(student);
			}
		} catch (Exception e) {
			log.error("保存学员失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/student_relation/to_student_relation_manager.action?id="+source_id+"&source_id="+source_id+"&stamp="+stamp+"&source_type="+source_type);
	}
	
	/**
	 * 删除学员（社区、工作坊）
	 */
	@RequestMapping("/del_student")
	public ModelAndView delStudent(HttpServletRequest request){
		String id = request.getParameter("id");
		String source_id = request.getParameter("source_id");
		String stamp = request.getParameter("stamp");
		String source_type = request.getParameter("source_type");
		try {
			studentRelationService.delStudentRelation(Long.parseLong(id));
		} catch (Exception e) {
			log.error("删除学员失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/student_relation/to_student_relation_manager.action?id="+source_id+"&source_id="+source_id+"&stamp="+stamp+"&source_type="+source_type);
	}
	
	
	@RequestMapping("/verify_data")
	public void verifyData(HttpServletRequest request,HttpServletResponse response) {
		JSONObject result=new JSONObject();
		Long source_id = Long.parseLong(request.getParameter("source_id"));
		Integer source_type = Integer.parseInt(request.getParameter("source_type"));
		String filename = request.getParameter("filename");
		String path = request.getSession().getServletContext().getRealPath(ConfigInfo.getString("studentExcel"));
		StudentRelationView student = new StudentRelationView();
		try{
			List<List<Object>> list = ReadExcel.readExcel(new File(path+"/"+filename),0,1,1000,5);
			StringBuilder nothing = new StringBuilder("");//查询数据不存在的行数
			StringBuilder existing = new StringBuilder("");//查询数据已存在的行数
			StringBuilder roletypes = new StringBuilder("");//身份角色
			StringBuilder remarks = new StringBuilder("");//身份角色
			Set<String> userIds = new HashSet<>();
			if(list==null||list.size()==0){
				result.put("msg", "格式错误");
				ResponseUtil.write(response, result);
				return;
			}
			for(int i = 1;i < list.size();i++){
				List<Object> lis = list.get(i);
				for(int m=0;m<3;m++){
					String str = lis.get(m).toString();
					TeacherRelationView teacher  = null;
					if(!"".equals(str)){
						teacher  = userService.searchUser0(str,"all");
					}
					if(teacher == null){
						//查无此人
						nothing.append((i+2)+",");
						break;
					}else{
						//验证该用户是否已在社区工作坊
						student.setUser_id(teacher.getId());
						student.setSource_id(source_id);
						student.setSource_type(source_type);
						int exist = studentRelationService.countStudent(student);
						if(exist == 0){//不在，可添加
							userIds.add(teacher.getId()+"");
							break;
						}else{
							existing.append((i+2)+",");
							break;
						}
					}
				}
				for(int n=3;n<5;n++){
					String str = lis.get(n).toString();
					if(n==3){
						if("管理员".equals(str)){
							roletypes.append("0,");
						}else if("专家".equals(str)){
							roletypes.append("1,");
						}else if("坊主".equals(str)){
							roletypes.append("3,");
						}else{
							roletypes.append("2,");
						}
					}else if(n==4){
						if(!"".equals(str)){
							remarks.append(str+",");
						}else{
							remarks.append(" ,");
						}
					}
				}
			}
			if(nothing.length()>0){
				result.put("nothing", nothing.substring(0,nothing.lastIndexOf(",")));
			}
			if(existing.length()>0){
				result.put("existing", existing.substring(0,existing.lastIndexOf(",")));
			}
			if(nothing.length()==0&&existing.length()==0){
				StringBuilder user_ids = new StringBuilder("");
				Iterator<String> it = userIds.iterator();
				while(it.hasNext()){
					user_ids.append(it.next()+",");
				}
				result.put("userIds", user_ids.substring(0,user_ids.lastIndexOf(",")));
				result.put("roletypes", roletypes.substring(0,roletypes.lastIndexOf(",")));
				result.put("remarks", remarks.substring(0,remarks.lastIndexOf(",")));
			}
			
			ResponseUtil.write(response, result);
		}catch(Exception e){
			e.printStackTrace();
			log.error("验证学员数据失败", ExceptionUtil.getExceptionMessage(e));
		}	
	}
	
	@RequestMapping("/batch_save_student")
	public ModelAndView batchSaveStudent(HttpServletRequest request){
		String stamp = request.getParameter("stamp");
		String userIds = request.getParameter("userIds");
		String roletypes = request.getParameter("roletypes");
		String remarks = request.getParameter("remarks");
		Long source_id = Long.parseLong(request.getParameter("source_id"));
		Integer source_type = Integer.parseInt(request.getParameter("source_type"));
		String[] userids = userIds.split(",");
		for(int i=0;i<userids.length;i++){
			StudentRelation student = new StudentRelation();
			student.setUser_id(Long.parseLong(userids[i]));
			student.setSource_id(source_id);
			String roletype = NumUtil.isNotEmpty(roletypes, i);
			student.setRole_type(!"".equals(roletype)?Integer.parseInt(roletype):2);
			String remark = NumUtil.isNotEmpty(remarks, i);
			if(!"".equals(remark)){
				student.setRemarks(remark);
			}
			student.setSource_type(source_type);
			studentRelationService.saveStudentRelation(student);
		}
		return new ModelAndView("redirect:/student_relation/to_student_relation_manager.action?id="+source_id+"&source_id="+source_id+"&stamp="+stamp+"&source_type="+source_type);
	}
	
	@RequestMapping("/export_student")
	public ModelAndView exportStudent(HttpServletRequest request, HttpServletResponse response) {
		String ids = request.getParameter("ids");
		Long source_id = Long.parseLong(request.getParameter("source_id"));
		Integer source_type = Integer.parseInt(request.getParameter("source_type"));
		List<StudentRelationView> studentList = studentRelationService.exportStudent(source_id, source_type,ids);
		String[] head = {"用户","手机号","邮箱","身份","备注" };
		String[] fieldNames = {"username","phone","email","role_name","remarks"};
		String fileName = "";
		if(source_type==0){
			CommunityView communityView = communityService.getById(source_id);
			fileName = communityView.getName()+"社区学员信息.xls";
		}else if(source_type==1){
			Workshop workshop = workShopService.getOne(source_id);
			fileName = workshop.getName()+"工作坊学员信息.xls";
		}
		response.setContentType("application/msexcel");
		try {
			ExportExcel<StudentRelationView> excel = new ExportExcel<StudentRelationView>();
			response.setHeader("Content-Disposition", excel.getFileName(fileName, excel.getExplorer(request)));
			OutputStream out = response.getOutputStream();
			excel.exportExcel("全体学员", head, fieldNames, studentList, out);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	/**
	 * 退出（社区、工作坊）
	 */
	@RequestMapping("/quit_student")
	public ModelAndView quitStudent(HttpServletRequest request){
		User user = (User) request.getSession().getAttribute("currentUser");
		String source_id = request.getParameter("source_id");
		String stamp = request.getParameter("stamp");
		String source_type = request.getParameter("source_type");
		try {
			studentRelationService.quitStudent(source_id,source_type,user.getId());
		} catch (Exception e) {
			log.error("退出失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/community/to_community_index.action?sourceType="+source_type+"&id="+source_id+"&stamp="+stamp);
	}
	
	/**
	 * 加入（社区、工作坊）
	 */
	@RequestMapping("/join_student")
	public ModelAndView joinStudent(HttpServletRequest request){
		User user = (User) request.getSession().getAttribute("currentUser");
		String source_id = request.getParameter("source_id");
		String stamp = request.getParameter("stamp");
		String source_type = request.getParameter("source_type");
		try {
			StudentRelation student = new StudentRelation();
			student.setRole_type(2);//普通学员
			student.setSource_id(Long.parseLong(source_id));
			student.setSource_type(Integer.parseInt(source_type));
			student.setUser_id(user.getId());
			studentRelationService.saveStudentRelation(student);
		} catch (Exception e) {
			log.error("加入失败",ExceptionUtil.getExceptionMessage(e));
		}
		return new ModelAndView("redirect:/community/to_community_index.action?sourceType="+source_type+"&id="+source_id+"&stamp="+stamp);
	}
	
}
