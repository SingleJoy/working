package cn.bnsr.edu_yun.backstage.workshop.controller;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.backstage.base.controller.BaseController;
import cn.bnsr.edu_yun.backstage.base.view.Json;
import cn.bnsr.edu_yun.frontstage.base.po.Recommended;
import cn.bnsr.edu_yun.frontstage.base.service.RecommendedService;
import cn.bnsr.edu_yun.frontstage.train.po.Workshop;
import cn.bnsr.edu_yun.frontstage.train.service.WorkshopService;
import cn.bnsr.edu_yun.frontstage.train.view.WorkshopView;
import cn.bnsr.edu_yun.util.ExceptionUtil;

@Controller
@RequestMapping("/back_workshop")
public class BackWorkShopController extends BaseController {
	
	private final Logger log = LoggerFactory.getLogger(BackWorkShopController.class);
	
	@Autowired
	private RecommendedService recommendedService;
	@Autowired
	private WorkshopService workshopService;

	
	/**
	 * 推荐
	 */
	@RequestMapping("/recommended")
	public void recommended(HttpServletResponse response, Recommended recommended) {
		Json j = new Json();
		try{
			int i=recommendedService.selectBySourceIdCount(recommended);
			if(i==0){
				recommended.setRecommended_time(new Date());
			    recommendedService.insert(recommended);
			}
			j.setSuccess(true);
			j.setMsg("操作成功！");
		} catch (Exception e) {
			log.error("推荐操作失败",ExceptionUtil.getExceptionMessage(e));
			j.setMsg("操作失败！");
		}
		super.writeJson(j,response);
	}
	
	/**
	 * 取消推荐
	 */
	@RequestMapping("/unrecommended")
	public void unrecommended(HttpServletResponse response, Recommended recommended) {
		Json j = new Json();
		try{
			Long i=recommendedService.selectId(recommended);
			if(i!=null){
			    recommendedService.delete(i);
			}
			j.setSuccess(true);
			j.setMsg("操作成功！");
		} catch (Exception e) {
			log.error("推荐操作失败",ExceptionUtil.getExceptionMessage(e));
			j.setMsg("操作失败！");
		}
		super.writeJson(j,response);
	}
	
	
	/**
	 *跳转工作坊页面
	 */
	@RequestMapping("/to_workshop")
	public ModelAndView toWorkshop(HttpServletRequest request) {
		return new ModelAndView("backstage/workshop/workshop");
	}
	
	/**
	 * 课例datagrid
	 */
	@RequestMapping("/datagrid")
	public void datagrid(HttpServletResponse response,WorkshopView workshopView) {
		super.writeJson(workshopService.datagrid(workshopView),response);
	}
	
	/**
	 *跳转推荐课例页面
	 */
	@RequestMapping("/to_recommend_workshop")
	public ModelAndView toRecommendWorkshop(HttpServletRequest request) {
		return new ModelAndView("backstage/workshop/recommend_workshop");
	}
	
	/**
	 * 开启/关闭工作坊
	 */
	@RequestMapping("/update_status")
	public void updateStatus(HttpServletResponse response, String ids,Integer status) {
		Json j = new Json();
		try{
			for(String id:ids.split(",")){
				Workshop workshop = new Workshop();
				workshop.setId(Long.parseLong(id));
				workshop.setStatus(status);
				workshopService.updateWorkshop(workshop);
			}
			j.setSuccess(true);
			j.setMsg("操作成功！");
		} catch (Exception e) {
			log.error("推荐操作失败",ExceptionUtil.getExceptionMessage(e));
			j.setMsg("操作失败！");
		}
		super.writeJson(j,response);
	}
	
	/**
	 * 推荐时获取最大推荐序号
	 * @throws Exception 
	 */
	@RequestMapping("/get_max_seq")
	public void getMaxSeq(HttpServletResponse response,Long community_id){
	    
		Json j = new Json();
		try{
			Long seq = workshopService.getMaxSeq(community_id);
			if(seq!=null){
				j.setObj(seq+1);
			}else{
				j.setObj(1);
			}
			j.setSuccess(true);
			j.setMsg("操作成功！");
		} catch (Exception e) {
			log.error("获取最大推荐序号操作失败",ExceptionUtil.getExceptionMessage(e));
			j.setMsg("操作失败！");
		}
		super.writeJson(j,response);
	}
	
	
	

}
