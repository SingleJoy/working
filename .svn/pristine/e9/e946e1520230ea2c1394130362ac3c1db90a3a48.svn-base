package cn.bnsr.edu_yun.frontstage.train.service.impl;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import cn.bnsr.edu_yun.backstage.base.view.DataGrid;
import cn.bnsr.edu_yun.backstage.base.view.StudyTimeView;
import cn.bnsr.edu_yun.comparator.StudyTimeViewComparator;
import cn.bnsr.edu_yun.frontstage.train.mapper.CourseHourMapper;
import cn.bnsr.edu_yun.frontstage.train.mapper.TopicQuestionMapper;
import cn.bnsr.edu_yun.frontstage.train.po.CourseHour;
import cn.bnsr.edu_yun.frontstage.train.po.TopicQuestion;
import cn.bnsr.edu_yun.frontstage.train.service.TopicQuestionService;
import cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView;
import cn.bnsr.edu_yun.frontstage.train.view.TopicQuestionView;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.TimeUtil;

public class TopicQuestionServiceImpl implements TopicQuestionService {

	@Autowired
	private TopicQuestionMapper topicQuestionMapper;
	
	@Autowired
	private CourseHourMapper courseHourMapper;
	

	@Override
	public int selectCountByCourseId(long course_id,int type,int elite) {

		return topicQuestionMapper.selectCountByCourseId(course_id,type,elite);
	}

	@Override
	public List<TopicQuestion> selectByCourseId(long course_id,int type,int elite, String sort,
			long start, long pageSize) {

		return topicQuestionMapper.selectByCourseId(course_id,type,elite, sort, start, pageSize);
	}

	@Override
	public int insert(TopicQuestion topicQuestion) {

		return topicQuestionMapper.insertSelective(topicQuestion);
	}

	@Override
	public int update(TopicQuestion topicQuestion) {

		return topicQuestionMapper.updateByPrimaryKeySelective(topicQuestion);
	}

	@Override
	public TopicQuestion selectById(long id) {

		return topicQuestionMapper.selectByPrimaryKey(id);
	}

	@Override
	public List<TopicQuestion> selectByCourseHourId(long course_hour_id,
			String sort, long start, long pageSize) {
		
		return topicQuestionMapper.selectByCourseHourId(course_hour_id, sort, start, pageSize);
	}

	@Override
	public List<TopicQuestionView> queryQuestion(
			TopicQuestionView topicQuestionView) {
		return topicQuestionMapper.queryStudentsAsk(topicQuestionView);
	}

	@Override
	public int queryTotalQuestion(TopicQuestionView topicQuestionView) {
		return topicQuestionMapper.queryTotalQuestion(topicQuestionView);
	}


	@Override
	public DataGrid datagrid(TopicQuestionView topicQuestionView) {
		DataGrid j = new DataGrid();
		topicQuestionView.setPage(NumUtil.startingNum(topicQuestionView.getPage(),topicQuestionView.getRows()));
		List<TopicQuestionView> list = topicQuestionMapper.search(topicQuestionView);
		/*if(list!=null&&list.size()>0){
			for(TopicQuestionView qaView:list){
				if(qaView.getCourseHourId()!=null){
					qaView.setCourseHourName(recursiveParentName(qaView.getCourseHourId()));
				}
			}
		}*/
		j.setRows(list);
		j.setTotal(topicQuestionMapper.count(topicQuestionView));
		return j;
	}
	
	/*
	 * 递归获取Course_hour_name的父名
	 */
	private String recursiveParentName(Long id) {
		CourseHour courseHour = courseHourMapper.selectByPrimaryKey(id);
		if(courseHour!=null){
			Long parent_id = courseHour.getParent_id();
			String hour_title = courseHour.getHour_title();
			if(parent_id!=0){
				return recursiveParentName(parent_id)+":"+hour_title;
			}else{
				return hour_title;
			}
		}
		return null;
	}


	@Override
	public void delete(String ids) {
		TopicQuestion topic = new TopicQuestion();
		if(ids!=null){
			for(String id:ids.split(",")){
				topic.setId(Long.parseLong(id.trim()));
				topic.setIs_delete(1);
				topicQuestionMapper.updateByPrimaryKeySelective(topic);
			}
		}
		
	}

	@Override
	public TopicQuestionView getById(Long id) {
		TopicQuestionView qaView = topicQuestionMapper.getById(id);
		if(qaView!=null){
			if(qaView.getCourseHourId()!=null){
				qaView.setCourseHourName(recursiveParentName(qaView.getCourseHourId()));
			}
			return qaView;
		}
		return null; 
	}


	@Override
	public List<TopicQuestionView> queryUserStudentsAsk(
			TopicQuestionView topicQuestionView) {
		
		return topicQuestionMapper.queryUserStudentsAsk(topicQuestionView);
	}

	@Override
	public int queryUserTotalQuestion(TopicQuestionView topicQuestionView) {
		
		return topicQuestionMapper.queryUserTotalQuestion(topicQuestionView);
	}

	@Override
	public int delete(TopicQuestion topicQuestion) {
		
		return topicQuestionMapper.deleteByPrimaryKey(topicQuestion.getId());
	}

	@Override
	public int countAllTopicQuestion(TopicQuestion topicQuestion) {
		
		return topicQuestionMapper.countUserQuestion(topicQuestion);
	}

	@Override
	public List<TopicQuestionView> queryTopic(TopicQuestionView topicQuestionView) {
		
		return topicQuestionMapper.queryTopic(topicQuestionView);
	}

	@Override
	public List<TopicQuestionView> queryTopicCommunity(CommunityCenterView communityCenterView) {
		
		return topicQuestionMapper.queryTopicCommunity(communityCenterView);
	}

	@Override
	public int queryTopicCommunityCount(CommunityCenterView communityCenterView) {
		
		return topicQuestionMapper.queryTopicCommunityCount(communityCenterView);
	}

	@Override
	public int queryTopicCount(TopicQuestionView topicQuestionView) {
		
		return topicQuestionMapper.queryTopicCount(topicQuestionView);
	}

	@Override
	public int selectCountByClassId(long class_id, int elite) {
		
		return topicQuestionMapper.selectCountByClassId(class_id, elite);
	}

	@Override
	public List<TopicQuestion> selectByClassId(long class_id, int elite, String sort, long start, long pageSize) {
		
		return topicQuestionMapper.selectByClassId(class_id, elite, sort, start, pageSize);
	}

	@Override
	public List<StudyTimeView> selectTopicChart(StudyTimeView studyTimeView) {
		 List<StudyTimeView> studyTimeViews= topicQuestionMapper.selectTopicChart(studyTimeView);
		 List<String> list = new ArrayList<String>();
			if(studyTimeView.getGroup().equals("1")){
				for(int i=0;i<24;i++){
					if(i<10){
						list.add("0"+i+"");	
					}else
					list.add(i+"");
				}
			
			}else if(studyTimeView.getGroup().equals("2")&&studyTimeView.getStartTime()!=null){
				try {
				Date start=TimeUtil.stringFormatDate1(studyTimeView.getStartTime());
				Date end=TimeUtil.stringFormatDate1(studyTimeView.getEndTime());
				Calendar calendar = Calendar.getInstance();
		        calendar.setTime(end);
		        calendar.add(Calendar.DAY_OF_MONTH, +1);//+1今天的时间加一天
		        end = calendar.getTime();
				list=TimeUtil.getBetweenDates(start, end);
				}catch (ParseException e) {
					e.printStackTrace();
				}
			}else if(studyTimeView.getGroup().equals("3")&&studyTimeView.getStartTime()!=null){
				try {
					Date start=TimeUtil.stringFormatDate1(studyTimeView.getStartTime());
					Date end=TimeUtil.stringFormatDate1(studyTimeView.getEndTime());
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(start);
					int i=   calendar.get(Calendar.WEEK_OF_YEAR);
			        calendar.setTime(end);
			        int j=   calendar.get(Calendar.WEEK_OF_YEAR);
			        for(int k=i;k<=j;k++){
						list.add(k+"");
					}
			      }catch (ParseException e) {
						e.printStackTrace();
					}
			}
			if (studyTimeViews.size() != list.size()) {
				List<String> dataList = new ArrayList<String>();
				for (int i = 0; i < studyTimeViews.size(); i++) {
					if(studyTimeView.getGroup().equals("1")){
					dataList.add(studyTimeViews.get(i).getHours());
					}else if(studyTimeView.getGroup().equals("2")){
						dataList.add(studyTimeViews.get(i).getDays());
					}else if(studyTimeView.getGroup().equals("3")){
						dataList.add(studyTimeViews.get(i).getWeeks());
					}
				}
				list.removeAll(dataList);// 差集
				for (int i = 0; i < list.size(); i++) {// 补全当前月日期
					StudyTimeView studyTimeStat = new StudyTimeView();
					if(studyTimeView.getGroup().equals("1")){
						studyTimeStat.setHours(list.get(i));
					}else if(studyTimeView.getGroup().equals("2")){
						studyTimeStat.setDays(list.get(i));
					}else if(studyTimeView.getGroup().equals("3")){
						studyTimeStat.setWeeks(list.get(i));
					}
				
					studyTimeStat.setUser_count(0);
					studyTimeStat.setCount(0);
					studyTimeViews.add(studyTimeStat);
				}
				}
			Collections.sort(studyTimeViews, new StudyTimeViewComparator());// 排序
		 return studyTimeViews;
	}


}
