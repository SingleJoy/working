package cn.bnsr.edu_yun.frontstage.base.controller;

import java.io.File;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.Area;
import cn.bnsr.edu_yun.frontstage.base.po.Classify;
import cn.bnsr.edu_yun.frontstage.base.po.School;
import cn.bnsr.edu_yun.frontstage.base.po.SubjectList;
import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.po.UserInfo;
import cn.bnsr.edu_yun.frontstage.base.service.AreaService;
import cn.bnsr.edu_yun.frontstage.base.service.ClassifyService;
import cn.bnsr.edu_yun.frontstage.base.service.SchoolService;
import cn.bnsr.edu_yun.frontstage.base.service.SubjectListService;
import cn.bnsr.edu_yun.frontstage.base.service.UserInfoService;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.base.view.CertificateView;
import cn.bnsr.edu_yun.frontstage.base.view.UserCenterView;
import cn.bnsr.edu_yun.util.ConfigInfo;
import cn.bnsr.edu_yun.util.MyArrayComparator;
import cn.bnsr.edu_yun.util.ResponseUtil;

@Controller
@RequestMapping("certification")
public class CertificationController {
	@Autowired
	private AreaService areaService;
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private SchoolService schoolService;
	@Autowired
	private SubjectListService subjectListService;
	@Autowired
	private UserService userService;
	@Autowired
	private ClassifyService classifyService;

	/**
	 * 老师和管理员申请页面
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/to_certification")
	public ModelAndView to_certification(HttpServletRequest request) {
		HttpSession session = request.getSession();
		int state = Integer.parseInt(request.getParameter("state"));
		User user = (User) session.getAttribute("currentUser");
		String stamp = request.getParameter("stamp");
		List<Area> area = areaService.selectByPid("1");
		MyArrayComparator comparator = new MyArrayComparator();
		Collections.sort(area,comparator); 
		request.setAttribute("provinceList", area);
		ModelAndView modelAndView = new ModelAndView();
		request.setAttribute("state", state);
		request.setAttribute("stamp", stamp);
		// 个人中心统计数据
		UserCenterView userCenter = userService.queryUserCenter(user.getId());
		modelAndView.addObject("userCenter", userCenter);
		modelAndView.addObject("head_title", "申请认证");
		UserInfo userInfo = userInfoService.getByUserId(user.getId());
		if(userInfo==null||userInfo.getCertificated()==null) 
		modelAndView.setViewName("frontstage/base/certification/new_certification");
		else if(userInfo.getCertificated()==2){
			modelAndView.setViewName("frontstage/base/certification/new_certification");	
		}else{
			String ID_number=userInfo.getID_number();
			ID_number=ID_number.substring(0,14)+"****";
			userInfo.setID_number(ID_number);
			modelAndView.setViewName("frontstage/base/certification/certification_succ");	
		}
		modelAndView.addObject("userInfo", userInfo);
		modelAndView.addObject("user", user);
		return modelAndView;
	}

	/**
	 * 提交申请
	 * 
	 * @param request
	 * @param view
	 * @return
	 */
	@RequestMapping("/certificate")
	public ModelAndView certificate(HttpServletRequest request, CertificateView view) {
		HttpSession session = request.getSession();
		Integer type = 0;
		User user = (User) session.getAttribute("currentUser");
		School school = schoolService.selectById(view.getSchool());
		SubjectList sub = subjectListService.selectById(view.getSubject());

		UserInfo userInfo = userInfoService.getByUserId(user.getId());
		if (userInfo == null) {
			userInfo = new UserInfo();
		}
		Area area = areaService.selectByid(view.getProvince());
		userInfo.setArea_id(area.getArea_id());
		if (!view.getCity().equals("-1")) {
			area = areaService.selectByid(view.getCity());
			userInfo.setArea_id(area.getArea_id());
			if (!view.getCounty().equals("-1")) {
				area = areaService.selectByid(view.getCounty());
				userInfo.setArea_id(area.getArea_id());
			}
		}
		userInfo.setCertificated(0);
		userInfo.setUser_id(user.getId());
		// 学校名
		if (school != null)
			userInfo.setSchool(school.getSchoolName());
		else
			userInfo.setSchool(view.getSchoolName());
		// 学校id
		userInfo.setSchool_id(view.getSchool());
		// 真实姓名
		userInfo.setTrue_name(view.getName());
		// 性别
		userInfo.setSex(view.getSex());
		// id
		userInfo.setID_number(view.getID_number());
		// 申请时间
		userInfo.setApply_time(new Date());
		// type
		userInfo.setType(view.getType());
		// user的status，user_type
		// user.setStatus(0+"");
		// user.setUser_type(type+"");
		if (type == 0) {
			// 课程
			String stage="";
			if(view.getStage().equals("XX")){
				stage="小学";
			}else if(view.getStage().equals("CZ")){
				stage="初中";
			}else{
				stage="高中";
			}
			userInfo.setCourse(stage + sub.getSubjectName());
			userInfo.setCertificate_type(view.getCertificate_type());
			// 版本id
			userInfo.setPubver_id(view.getEdition());
			// 年级id
			userInfo.setGrade_id(view.getGrade());
			// 图
			userInfo.setPicture1(view.getPicture1());
			if (view.getPicture2() != null)
				userInfo.setPicture2(view.getPicture2());
			if (view.getPicture3() != null)
				userInfo.setPicture3(view.getPicture3());
			// 职位职称
			if (!view.getTitles().equals("-1"))
				userInfo.setTitles_id(Integer.parseInt(view.getTitles()));
			if (!view.getPosition().equals("-1"))
				userInfo.setPosition_id(Integer.parseInt(view.getPosition()));
		}
		userInfo.setCertificated(0);
		if (userInfo.getId() == null) {
			userInfoService.insert(userInfo);
		} else {
			userInfoService.updateUserInfo(userInfo);
		}

		ModelAndView modelAndView = new ModelAndView();
		
		//跳转正在审核
		modelAndView.setViewName("redirect:/certification/to_certification.action?state=36&stamp=7");
		return modelAndView;
	}

	/**
	 * 认证申请
	 * 
	 * @param request
	 * @param view
	 * @param response
	 */
	@RequestMapping("/certificating")
	public void certificating(HttpServletRequest request, CertificateView view, HttpServletResponse response) {

	}

	/**
	 * 获取验证码
	 * 
	 * @param request
	 * @param view
	 * @param response
	 */
	@RequestMapping("/get_yzm")
	public void get_yzm(HttpServletRequest request, CertificateView view, HttpServletResponse response) {

	}

	@RequestMapping("/upload_img")
	public void upload(@RequestParam(value = "file", required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String path = request.getSession().getServletContext().getRealPath(ConfigInfo.getString("certificatePicture"));
		Date date = new Date();
		long time = date.getTime();
		String fileName = "img" + time;
		String format = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
		Random ra = new Random();
		for (int i = 0; i < 3; i++) {
			fileName += ra.nextInt(10);
		}
		fileName += format;
		System.out.println(path);
		File targetFile = new File(path, fileName);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}

		// 保存
		try {
			file.transferTo(targetFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
		JSONObject result = new JSONObject();
		result.put("fileName", ConfigInfo.getString("certificatePicture") + "/" + fileName);
		ResponseUtil.write(response, result);

	}

	@RequestMapping("/query_titles")
	public void query_titles(HttpServletRequest request, HttpServletResponse response, String subId) throws Exception {
		String classifyId = null;
		if (subId.equals("XX")) {
			classifyId = "43";
		}
		if (subId.equals("CZ")) {
			classifyId = "44";
		}
		if (subId.equals("GZ")) {
			classifyId = "45";
		}
		if (classifyId != null) {
			List<Classify> position = classifyService.queryByParentId(Long.parseLong(classifyId));
			List<Classify> titles = classifyService.queryByParentId(37l);
			JSONObject result = new JSONObject();
			result.put("position", position);
			result.put("titles", titles);
			ResponseUtil.write(response, result);
		}

	}
}
