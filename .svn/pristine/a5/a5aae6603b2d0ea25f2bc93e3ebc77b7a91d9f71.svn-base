package cn.bnsr.edu_yun.util;

import java.lang.reflect.Method;
import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.aspectj.lang.JoinPoint;
import org.springframework.beans.factory.annotation.Autowired;

import cn.bnsr.edu_yun.backstage.base.po.SysLog;
import cn.bnsr.edu_yun.backstage.base.service.BackUserService;
import cn.bnsr.edu_yun.backstage.base.service.SysLogService;
import cn.bnsr.edu_yun.frontstage.base.po.Area;
import cn.bnsr.edu_yun.frontstage.base.po.IpIntercept;
import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.service.AreaService;
import cn.bnsr.edu_yun.frontstage.base.service.IpInterceptService;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.base.view.IpIntercepterView;
import nl.bitwalker.useragentutils.Browser;
import nl.bitwalker.useragentutils.UserAgent;
/**
 * 日志管理
 * @author fangxiongwei
 * @date 2017年6月24日
 */
public class LogAspect {
	private Log logger = LogFactory.getLog(LogAspect.class);
	@Autowired
	private SysLogService  sysLogService;
	@Autowired
	private BackUserService  backUserService;
	@Autowired
	private UserService userService;
	@Autowired
	private IpInterceptService ipInterceptService;
	@Autowired
	private AreaService areaService;
	
	//TODO完善优化
	private long startTimeMillis = 0; // 开始时间  
    private long endTimeMillis = 0; // 结束时间  
	
   /** 
     * 方法调用前触发   记录开始时间  
     */ 
    public void before(JoinPoint joinPoint){ 
        //System.out.println("被拦截方法调用之后调用此方法，输出此语句");  
		HttpServletRequest request = RequestUtil.getHttpServletRequest(); 
        //fileName  为例子
        startTimeMillis = System.currentTimeMillis(); //记录方法开始执行的时间  
        System.out.println("开始>>"+startTimeMillis);
    }  
    
	/**
	 * 添加日志（after method done）
	 */
	public void doSystemLog(JoinPoint joinPoint){
		HttpServletRequest request = RequestUtil.getHttpServletRequest(); 
		try {
			String requestPath = RequestUtil.getRequestPath(request);
			String methodName = joinPoint.getSignature().getName();
			String targetName = joinPoint.getTarget().getClass().getName();
			// 目标方法不为空
			if (StringUtils.isNotEmpty(methodName)) {
				// 只拦截除去这些之外请求
				if (!(methodName.contains("to_")||methodName.equals("doNotNeedSession_tree"))) {
					 Class targetClass = null;
			         try {
			            targetClass = Class.forName(targetName);
			         } catch (ClassNotFoundException e) {
			            e.printStackTrace();
			         }
			        Method[] methods = targetClass.getDeclaredMethods();  
		            for (Method method : methods) {  
		            	//方法名相同，并且有aop注解
		            	if(methodName.equals(method.getName()) && method.isAnnotationPresent(UserLog.class)){
		                  //获取日志内容
							UserLog annotation = method.getAnnotation(UserLog.class);
							String methodDescp = annotation.description();
							String do_id = annotation.do_id();
							//用户使用的浏览器类型
							UserAgent userAgent = UserAgent.parseUserAgentString(request.getHeader("User-Agent"));
							//浏览器类型
							Browser browser = userAgent.getBrowser();
							//操作系统类型
							String os = null;
							//设备：计算机、移动设备
							Integer device = 1;//移动设备
							//日志请求URL
							String do_url = requestPath;
							//获取用户登录的外网IP
							String networkIp = IpUtil.getIpAddr(request);
							//地理位置 省市
							String address = "";
							//省id
							String province_id = "";
							if("".equals(networkIp)){ 
							     networkIp = request.getRemoteAddr();
							}
							HttpSession session = request.getSession();
							networkIp = StringUtils.isBlank(networkIp) ? "":networkIp; 
							if(!"".equals(networkIp)&&!"本地".equals(networkIp)&&networkIp.indexOf("192.168.10.")==-1){
								IpIntercepterView ipIntercept = new IpIntercepterView();
								ipIntercept.setRemote_ip(networkIp);
								ipIntercept.setCreate_time(TimeUtil.dateToString1(new Date()));
								IpIntercept ipIntercept1 = ipInterceptService.queryIpInfoByIp(ipIntercept);
								if(ipIntercept1!=null){//找到之前访问的ip 和地址了
									if(ipIntercept1.getIs_intercept()==1){//放过的ip
										address = ipIntercept1.getRegion()+ipIntercept1.getCity();
										if(ipIntercept1.getRegion().length()>0){
											Area area = areaService.selectByName(ipIntercept1.getRegion());
											if(area!=null){
												province_id = area.getId();
											}
										}
									}
//									else 未知原因，AreaInterceptor记录ip信息却放过关闭的ip
								}else{//未知原因，AreaInterceptor没有记录ip 和地址
									Map<String,String> addressMap = AddressUtils.getAddress(networkIp, "utf-8");
									if(addressMap!=null&&(addressMap.get("region")!=null||addressMap.get("city")!=null)){
										address = addressMap.get("region")+addressMap.get("city");
										if(addressMap.get("region").length()>0){
											Area area = areaService.selectByName(addressMap.get("region"));
											if(area!=null){
												province_id = area.getId();
											}
										}
									}
								}
							}
							String do_from = "";// 日志来源
							//验证请求是否为PC端
							os = userAgent.getOperatingSystem().toString();//操作系统
							if(HttpRequest.checkAgentIsMobile(request)){//是手机端
								if(os.contains("android")){
									do_from = "3";//Android客户端日志
									os = "Android操作系统";
								}else if(os.contains("iPhone")){
									do_from = "4";//iPhone客户端日志
									os = "iPhone操作系统";
								}
							}else{//PC端
								if (requestPath.indexOf("front") != -1) {
									do_from = "1";//web前台日志
								} else {
									do_from = "2";//web后台日志
								}
								device = 0;//PC端
							}
							
							Long userId = null;// 登录用户Id
							String userName = "";	// 登录用户名
							String userPassword = "";//登录用户密码
							
							//日志信息
							SysLog syslog = new SysLog();
							syslog.setProvince_id(province_id);
							syslog.setRemote_ip(networkIp);
							syslog.setAddress(address);
							syslog.setCreate_time(new Date());
							syslog.setBrowser(browser.toString());//浏览器类型
							syslog.setSys_name(os.toString());//系统类型
							syslog.setDevice(device);//设备
							syslog.setDo_from(do_from);//日志来源
							syslog.setDo_url(do_url);//路径
							

						    HttpServletRequest httpRequest=(HttpServletRequest)request;  
						              
						    String strBackUrl = "http://" + request.getServerName() //服务器地址  
						                        + ":"   
						                        + request.getServerPort()           //端口号  
						                        + httpRequest.getContextPath()      //项目名称  
						                        + httpRequest.getServletPath()      //请求页面或其他地址  
						                    + "?" + (httpRequest.getQueryString()); //参数  

							
							if (logger.isDebugEnabled()) {//
								//获取session信息
								User user = (User) session.getAttribute("currentUser");//此session对象只在前台存在
								if (user != null) {//前台用户已经登录！
									// 登录用户Id
									userId = user.getId();
									// 登录用户名
									userName = user.getUsername();
									// 登录密码
									userPassword = user.getPassword();
									//判断是否为手机端登录
									if("webService_login".equals(methodName)){//手机端登录
										/*//解析json参数包
										JSONObject resJson = AppJson.toJson(request.getParameter("jsondata"));
										userName = resJson.getString("loginName");
										userPassword  = resJson.getString("loginPwd"); */
									}else{//WEB端登录
										//获取登录用户名
//										userName = request.getParameter("username");
										//用户密码
//										userPassword = request.getParameter("password");
									}
									
								}/*else{//获取后台登录信息
									//获取登录用户名
									userName = request.getParameter("username");
									//用户密码
									userPassword = request.getParameter("password");
								}*/
								userName = userName!=""?userName:request.getParameter("username");
								userPassword = userPassword!=""?userPassword:request.getParameter("password");
								//判断日志是否为登录日志 或者是注册并登录
								if ("doNotNeedSession_login".equals(methodName)|| "login".equals(methodName)||"register1".equals(methodName)) {
								
									//封装日志信息
									User u0 = new User();
									u0.setUsername(userName);
									u0.setPassword(userPassword);
									syslog.setUser_name(userName);
									
									User u = backUserService.login(u0);
									u=u!=null?u:user;//原因是快捷注册用户没有密码，所以一定查不到，只能借用session用户，而其他状况下都有密码
									if (u != null) {
										if("register1".equals(methodName)){//提前记录注册
											syslog.setLog_type(0);
											syslog.setUser_id(u.getId());//初始状态的用户status为正常
											syslog.setMsg("注册成功");
											//添加日志
											sysLogService.saveSysLog(syslog);
											syslog.setUser_id(null);
										}
										boolean b = true;
										if(!u.getStatus().equals("1")){//该用户已被禁用
											syslog.setMsg("登录失败！该用于已被禁用");
											b = false;
										}
										if ("doNotNeedSession_login".equals(methodName)){
											if(!u.getUser_type().equals("0")){
												syslog.setMsg("登录失败！您没有权限登录后台！");//网站用户,不能登录后台
												b = false;
											}
										}
										if(b){
											syslog.setMsg("登录成功！");
											syslog.setUser_id(u.getId());
										}
									}
									syslog.setLog_type(1);
								} else if ("doNotNeedSession_logout".equals(methodName)|| "frontAjaxLogout".equals(methodName)) {//退出或注销日志
									//由于是在用户注销之后才记录日志，此时无法获取用户信息，所以需要查询
									Long id = (Long) request.getAttribute("extraId");
									if(id!=null){
										User u = userService.selectByPrimaryKey(id);
										if(u!=null){
											syslog.setLog_type(2);
											syslog.setUser_name(u.getUsername());
											syslog.setUser_id(u.getId());
											syslog.setMsg("注销成功！");
										}
									}
									request.getSession().invalidate();
								} else {//用户操作日志
									if(do_id.equals("0")){
										String do_type = request.getParameter("sourceType");
										String id= request.getParameter("id");
										syslog.setDo_id(id!=null?Long.parseLong(id):0);
										syslog.setDo_type(do_type!=null?Integer.parseInt(do_type):-1);
									}
									syslog.setLog_type(3);
									syslog.setUser_name(userName);
									syslog.setUser_id(userId);
									syslog.setMsg(methodDescp);
								}
								//添加日志
								sysLogService.saveSysLog(syslog);
								
							}
							break;
		                }  
		            }  
				}
			}
		} catch (Throwable e) {
			logger.error("日志添加异常", e);
			e.printStackTrace();
		}
	}
	
}
