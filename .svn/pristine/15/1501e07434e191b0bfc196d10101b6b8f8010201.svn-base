package cn.bnsr.edu_yun.frontstage.base.controller;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import cn.bnsr.edu_yun.frontstage.base.po.Area;
import cn.bnsr.edu_yun.frontstage.base.po.Grade;
import cn.bnsr.edu_yun.frontstage.base.po.PubverList;
import cn.bnsr.edu_yun.frontstage.base.po.School;
import cn.bnsr.edu_yun.frontstage.base.po.SubjectList;
import cn.bnsr.edu_yun.frontstage.base.po.User;
import cn.bnsr.edu_yun.frontstage.base.po.UserInfo;
import cn.bnsr.edu_yun.frontstage.base.service.AreaService;
import cn.bnsr.edu_yun.frontstage.base.service.BookCatService;
import cn.bnsr.edu_yun.frontstage.base.service.GradeService;
import cn.bnsr.edu_yun.frontstage.base.service.MySettingService;
import cn.bnsr.edu_yun.frontstage.base.service.PubverListService;
import cn.bnsr.edu_yun.frontstage.base.service.SchoolService;
import cn.bnsr.edu_yun.frontstage.base.service.SubjectListService;
import cn.bnsr.edu_yun.frontstage.base.service.UserInfoService;
import cn.bnsr.edu_yun.frontstage.base.service.UserService;
import cn.bnsr.edu_yun.frontstage.base.view.ImageView;
import cn.bnsr.edu_yun.frontstage.base.view.MySettingView;
import cn.bnsr.edu_yun.frontstage.base.view.UserCenterView;
import cn.bnsr.edu_yun.frontstage.train.service.CertModelPictureService;
import cn.bnsr.edu_yun.frontstage.train.view.CertModelPictureView;
import cn.bnsr.edu_yun.util.ConfigInfo;
import cn.bnsr.edu_yun.util.ExceptionUtil;
import cn.bnsr.edu_yun.util.ImageUtil;
import cn.bnsr.edu_yun.util.MyArrayComparator;
import cn.bnsr.edu_yun.util.NumUtil;
import cn.bnsr.edu_yun.util.ResponseUtil;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
@RequestMapping("my_setting")
public class MySettingController {
	private final Logger log = LoggerFactory.getLogger(MySettingController.class);
	@Autowired
	private MySettingService mySettingService;
	@Autowired
	private UserService userService;
	@Autowired
	private UserInfoService userInfoService;
	@Autowired
	private BookCatService bookCatService;
	@Autowired
	private SchoolService schoolService;
	@Autowired
	private AreaService areaService;
	@Autowired
	private GradeService gradeService;
	@Autowired
	private PubverListService pubverListService;
	@Autowired
	private SubjectListService subjectListService;
	@Autowired
	private CertModelPictureService certModelPictureService;

	private int state = 0;

	@RequestMapping("/showMySetting")

	public ModelAndView showMySetting(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.addObject("head_title", "个人设置");
		if (request.getParameter("state") != null) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		String updateOk = request.getParameter("updateOk");
		modelAndView.addObject("updateOk", updateOk);
		String stamp = request.getParameter("stamp");
		User user = (User) request.getSession().getAttribute("currentUser");
		long userId = user.getId();
		if (userInfoService.getByUserId(userId) == null) {
			UserInfo userInfo = new UserInfo();
			userInfo.setUser_id(userId);
			userInfoService.insert(userInfo);
		}
		MySettingView view = mySettingService.showMySetting(userId);
		UserInfo userInfo2 = userInfoService.getByUserId(user.getId());
		request.setAttribute("user", user);
		request.setAttribute("userInfo", userInfo2);
		// 个人中心统计数据
		UserCenterView userCenter = userService.queryUserCenter(user.getId());
		modelAndView.addObject("userCenter", userCenter);

		request.setAttribute("mySetting", view);
		request.setAttribute("state", state);
		request.setAttribute("stamp", stamp);
		School school = null;
		if (userInfo2 != null)
			school = schoolService.selectById(userInfo2.getSchool_id());

		if (school != null) {

			String province = school.getProvinceId();
			String city = school.getCityId();
			String county = school.getCountyId();
			if (province != null && !"-1".equals(province)) {
				Area area = areaService.selectByid(province);
				List<Area> area2 = areaService.selectByPid("1");
				MyArrayComparator comparator = new MyArrayComparator();
				Collections.sort(area2,comparator); 
				List<School> school2 = schoolService.selectByProvinceId(province);
				request.setAttribute("schoolList", school2);
				request.setAttribute("provinceList", area2);
				request.setAttribute("province", area.getId());
				List<Area> area3 = areaService.selectByPid(province);
				Collections.sort(area3,comparator); 
				request.setAttribute("cityList", area3);
				List<Area> area4 = areaService.selectByPid(city);
				Collections.sort(area4,comparator); 
				request.setAttribute("countyList", area4);

			}

			if (city != null && !"-1".equals(city)) {
				Area area = areaService.selectByid(city);
				List<School> school2 = schoolService.selectByCityId(city);
				request.setAttribute("schoolList", school2);

				request.setAttribute("city", area.getId());

			}

			if (county != null && !"-1".equals(county)) {
				Area area = areaService.selectByid(county);
				List<School> school2 = schoolService.selectByCountyId(county);
				request.setAttribute("schoolList", school2);
				request.setAttribute("county", area.getId());

			}

			request.setAttribute("school", school.getId());
		} else {
			List<Area> area2 = areaService.selectByPid("1");
			MyArrayComparator comparator = new MyArrayComparator();
			Collections.sort(area2,comparator); 
			request.setAttribute("provinceList", area2);
		}
		// userInfo2.getSubject_id();
		if (userInfo2 != null) {
			if (userInfo2.getGrade_id() != null) {
				Grade grade = gradeService.selectById(userInfo2.getGrade_id());
				if (grade != null) {
					request.setAttribute("gradeList", gradeService.selectGrade());
					request.setAttribute("gradeId", grade.getId());
				}
			}
			if (userInfo2.getPubver_id() != null) {
				PubverList pubverList = pubverListService.selectById(userInfo2.getPubver_id());
				if (pubverList != null) {
					request.setAttribute("edition", pubverList.getVersionName());
					request.setAttribute("editionId", pubverList.getId());
					request.setAttribute("editionList",
							pubverListService.queryPubver(pubverList.getId().substring(0, 5)));
					SubjectList subjcetList = subjectListService.selectById(pubverList.getId().substring(0, 5));
					request.setAttribute("subject", subjcetList.getSubjectName());
					request.setAttribute("subjectId", subjcetList.getId());
					request.setAttribute("subjectList",
							subjectListService.querySubject(subjcetList.getId().substring(0, 2)));
					request.setAttribute("studySection",
							subjectListService.selectById(subjcetList.getId().substring(0, 2)).getId());

				}

			}
		}
		modelAndView.setViewName("frontstage/base/personalCenter/base_info");

		return modelAndView;
	}

	@RequestMapping("/showMyIcon")
	public ModelAndView showMyIcon(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.addObject("head_title", "个人设置");
		if (request.getParameter("state") != null) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		String stamp = request.getParameter("stamp");
		String fileName = null;
		User user = (User) request.getSession().getAttribute("currentUser");
		if (request.getParameter("fileName") != null) {
			fileName = request.getParameter("fileName");
		} else {
			fileName = user.getIcon();
		}
		long userId = user.getId();
		if (userInfoService.getByUserId(userId) == null) {
			UserInfo userInfo = new UserInfo();
			userInfo.setUser_id(userId);
			userInfoService.insert(userInfo);
		}
		MySettingView view = mySettingService.showMySetting(userId);
		UserInfo userInfo2 = userInfoService.getByUserId(user.getId());
		request.setAttribute("user", user);
		request.setAttribute("userInfo", userInfo2);
		// 个人中心统计数据
		UserCenterView userCenter = userService.queryUserCenter(user.getId());
		modelAndView.addObject("userCenter", userCenter);
		request.setAttribute("mySetting", view);
		request.setAttribute("state", state);
		request.setAttribute("stamp", stamp);
		request.setAttribute("fileName", fileName);
		modelAndView.setViewName("frontstage/base/personalCenter/personal_icon");
		return modelAndView;
	}

	@RequestMapping("/updateMySetting")
	public ModelAndView updateMySetting(HttpServletRequest request, UserInfo userInfo,ImageView imageView) {
		long id = Integer.parseInt(request.getParameter("userId"));
		long userId = Integer.parseInt(request.getParameter("id"));
		String icon = request.getParameter("icon");
		int sex = 0;
		if(request.getParameter("sex")!=null){
			sex = Integer.parseInt(request.getParameter("sex"));
		}
		User user = (User) request.getSession().getAttribute("currentUser");
		if (request.getParameter("state") != null) {
			state = Integer.parseInt(request.getParameter("state"));
		}
		String stamp = request.getParameter("stamp");
		String upload = request.getParameter("upload");
		user.setId(id);
		if ("1".equals(upload)){
			if(imageView.getX()!=null){
				 ImageUtil util=new ImageUtil();
				 System.out.println(request.getContextPath()+icon);
            String url=request.getSession().getServletContext().getRealPath("")+icon;
				 util.cut(url, url, imageView.getX(), imageView.getY(), imageView.getW(), imageView.getH(), imageView.getWidth(),imageView.getHeight());
			}
			user.setIcon(icon);
			String is_default_img = request.getParameter("is_default_img");
			user.setIs_default_img(Integer.parseInt(is_default_img));
		}
		userInfo.setSex(sex);
		if (request.getParameter("userName") != null) {
			String userName = request.getParameter("userName");
			user.setUsername(userName);
		}
		if (request.getParameter("phone") != null) {
			String phone = request.getParameter("phone");
			user.setPhone(phone);
		}
		if (request.getParameter("email") != null) {
			String email = request.getParameter("email");
			user.setEmail(email);
		}
		if (request.getParameter("realname") != null) {
			String realname = request.getParameter("realname");
			user.setRealname(realname);
			userInfo.setTrue_name(realname);
		}
		if (request.getParameter("ID_number") != null) {
			String ID_number = request.getParameter("ID_number");
			userInfo.setID_number(ID_number);
		}
		String synopsis = request.getParameter("synopsis");
		userInfo.setProfile(synopsis);
		String newSchool = request.getParameter("newSchool");
		// 学校
		String school_id = request.getParameter("school_id");
		if (newSchool != null && !"".equals(newSchool)) {
			School school = new School();
			school.setProvinceId(request.getParameter("province"));
			if (!"".equals(request.getParameter("city"))) {
				System.out.println(request.getParameter("city") + "pppppppp");
				school.setCityId(request.getParameter("city"));
			}
			if (!"".equals(request.getParameter("county"))) {
				school.setCountyId(request.getParameter("county"));
			}
			school.setSchoolName(request.getParameter("newSchool"));
			schoolService.insert(school);
			userInfo.setSchool(school.getSchoolName());
			userInfo.setSchool_id(school.getId());
		} else {
			if ( school_id!= null&&Integer.parseInt(school_id)!=-1) {
				School school = schoolService.selectById((long) Integer.parseInt(school_id));
				userInfo.setSchool(school.getSchoolName());
			}
		}

		// 学科
		String grade = request.getParameter("grade");
		String edition = request.getParameter("edition");
		if (grade != null && edition != null) {
			if (!"".equals(edition) && !"".equals(grade)) {
				userInfo.setPubver_id(edition);
				userInfo.setGrade_id(Integer.parseInt(grade));
			}
		}
		userInfo.setId(userId);
		userInfoService.updateUserInfo(userInfo);
		userService.updateUser(user);
		request.getSession().setAttribute("currentUser", user);
		ModelAndView modelAndView = new ModelAndView();
		if ("1".equals(upload)) {
			modelAndView.setViewName(
					"redirect:/my_setting/showMyIcon.action?userId=" + id + "&state=" + state + "&stamp=" + stamp);
		} else {
			modelAndView.setViewName(
					"redirect:/my_setting/showMySetting.action?updateOk=1&userId=" + id + "&state=" + state + "&stamp=" + stamp);
		}
		return modelAndView;

	}

	@RequestMapping("/upload")
	public ModelAndView upload(@RequestParam(value = "file", required = false) MultipartFile file,
			HttpServletRequest request,HttpServletResponse response) throws UnsupportedEncodingException {
		User user2 = (User) request.getSession().getAttribute("currentUser");
		ModelAndView modelAndView = new ModelAndView();
		String fileType = "jpg,png,gif";
		// System.out.println("开始");
		// 路径上传到哪 E://
		String path = request.getSession().getServletContext().getRealPath(ConfigInfo.getString("userImages"));
		String fileName = file.getOriginalFilename();
		String postfix = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();

		if (!"".equals(postfix) && fileType.indexOf(postfix) == -1) {
			modelAndView.setViewName("frontstage/base/dis_format");
			return modelAndView;
		} else {
			File targetFile = new File(path, fileName);
			if (!targetFile.exists()) {
				targetFile.mkdirs();
			}

			// 保存
			try {
				file.transferTo(targetFile);
			} catch (Exception e) {
				e.printStackTrace();
			}
			fileName = URLEncoder.encode(fileName.toString(), "utf-8");
			JSONObject result=new JSONObject();
			result.put("userId", user2.getId());
			result.put("filepath", ConfigInfo.getString("userImages") + "/" + fileName);
			try {
				ResponseUtil.write(response, result);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			/*modelAndView.setViewName("redirect:/my_setting/showMyIcon.action?userId=" + user2.getId() + "&fileName="
					+ ConfigInfo.getString("userImages") + "/" + fileName);*/
			return null;
		}
	}

	@RequestMapping("/updateSubject")
	public ModelAndView updateSubject(HttpServletRequest request) {
		String grade = request.getParameter("grade");
		String edition = request.getParameter("edition");
		if (!"".equals(edition) && !"".equals(grade)) {
			User user = (User) request.getSession().getAttribute("currentUser");
			UserInfo userInfo = userInfoService.getByUserId(user.getId());
			UserInfo userInfo2 = new UserInfo();
			userInfo2.setId(userInfo.getId());
			userInfo2.setPubver_id(edition);
			userInfo2.setGrade_id(Integer.parseInt(grade));
			userInfoService.updateUserInfo(userInfo2);

		}
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("redirect:/my_setting/showMySetting.action");
		return modelAndView;

	}

	@RequestMapping("/updateSchool")
	public ModelAndView updateSchool(HttpServletRequest request) {
		// String grade = request.getParameter("grade");
		User user = (User) request.getSession().getAttribute("currentUser");
		long userId = user.getId();
		if (!"".equals(request.getParameter("newSchool"))) {
			School school = new School();
			school.setProvinceId(request.getParameter("province"));
			if (!"".equals(request.getParameter("city"))) {
				System.out.println(request.getParameter("city") + "pppppppp");
				school.setCityId(request.getParameter("city"));
			}
			if (!"".equals(request.getParameter("county"))) {
				school.setCountyId(request.getParameter("county"));
			}
			school.setSchoolName(request.getParameter("newSchool"));
			schoolService.insert(school);

			UserInfo userInfo = userInfoService.getByUserId(userId);
			UserInfo userInfo2 = new UserInfo();
			userInfo2.setId(userInfo.getId());

			userInfo2.setSchool_id(school.getId());
			userInfoService.updateUserInfo(userInfo2);
		} else {
			if (request.getParameter("school_id") != null) {

				UserInfo userInfo = userInfoService.getByUserId(userId);
				UserInfo userInfo2 = new UserInfo();
				userInfo2.setId(userInfo.getId());

				userInfo2.setSchool_id((long) Integer.parseInt(request.getParameter("school_id")));
				userInfoService.updateUserInfo(userInfo2);

			}
		}

		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("redirect:/my_setting/showMySetting.action");
		return modelAndView;

	}

	@RequestMapping("/selectGrade")
	@ResponseBody
	public JSONArray selectGrade() {

		JSONArray jsonArray = JSONArray.fromObject(gradeService.selectGrade());
		return jsonArray;
	}

	@RequestMapping("/query_head_portrait")
	@ResponseBody
	public void queryCertModelPicture(HttpServletRequest request, HttpServletResponse response,
			CertModelPictureView certModelPictureView) {
		try {
			certModelPictureView.setRows(5);
			if (certModelPictureView.getPage() == 0) {
				certModelPictureView.setStartLine(0);
			} else {
				certModelPictureView.setStartLine(certModelPictureView.getPage() * certModelPictureView.getRows());
			}
			int total = certModelPictureService.countCertModelPicture(certModelPictureView);// 提问总数
			certModelPictureView.setTotal(total);
			// 分页总页数
			certModelPictureView.setTotalPage(NumUtil.totalPage(total, certModelPictureView.getRows()));
			List<CertModelPictureView> certModelPictureList = certModelPictureService
					.selectAllPicture(certModelPictureView);
			JSONObject result = new JSONObject();
			result.put("certModelPictureView", certModelPictureView);
			result.element("certModelPictures", certModelPictureList);
			ResponseUtil.write(response, result);
		} catch (Exception e) {
			e.printStackTrace();
			log.error("查询证书模板图片信息失败", ExceptionUtil.getExceptionMessage(e));
		}
	}

}
