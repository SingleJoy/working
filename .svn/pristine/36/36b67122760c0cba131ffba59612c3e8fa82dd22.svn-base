<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.bnsr.edu_yun.frontstage.train.mapper.TrainMapper" >
  <resultMap id="BaseResultMap" type="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="classify_id" property="classify_id" jdbcType="BIGINT" />
    <result column="img" property="img" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DOUBLE" />
    <result column="old_price" property="old_price" jdbcType="DOUBLE" />
    <result column="user_id" property="user_id" jdbcType="BIGINT" />
    <result column="create_time" property="create_time" jdbcType="TIMESTAMP" />
    <result column="recommend_seq" property="recommend_seq" jdbcType="INTEGER" />
    <result column="recommend_time" property="recommend_time" jdbcType="TIMESTAMP" />
    <result column="is_recommend" property="is_recommend" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="is_sort" property="is_sort" jdbcType="INTEGER" />
    <result column="sponsor" property="sponsor" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="is_check" property="is_check" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.bnsr.edu_yun.frontstage.train.po.Train" extends="BaseResultMap" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    <result column="profile" property="profile" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    id, name, classify_id, img, price, old_price, user_id, create_time, recommend_seq, 
    recommend_time, is_recommend, status, is_sort, sponsor, type, is_check
  </sql>
  <sql id="Blob_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    profile
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from train
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    delete from train
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into train (name, classify_id, img, 
      price, old_price, user_id, 
      create_time, recommend_seq, recommend_time, 
      is_recommend, status, is_sort, 
      sponsor, profile, type, is_check)
    values (#{name,jdbcType=VARCHAR}, #{classify_id,jdbcType=BIGINT}, #{img,jdbcType=VARCHAR}, 
      #{price,jdbcType=DOUBLE}, #{old_price,jdbcType=DOUBLE}, #{user_id,jdbcType=BIGINT}, 
      #{create_time,jdbcType=TIMESTAMP}, #{recommend_seq,jdbcType=INTEGER}, #{recommend_time,jdbcType=TIMESTAMP}, 
      #{is_recommend,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{is_sort,jdbcType=INTEGER}, 
      #{sponsor,jdbcType=VARCHAR}, #{profile,jdbcType=LONGVARCHAR}, 
      #{type,jdbcType=INTEGER},#{is_check,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into train
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        name,
      </if>
      <if test="classify_id != null" >
        classify_id,
      </if>
      <if test="img != null" >
        img,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="old_price != null" >
        old_price,
      </if>
      <if test="user_id != null" >
        user_id,
      </if>
      <if test="create_time != null" >
        create_time,
      </if>
      <if test="recommend_seq != null" >
        recommend_seq,
      </if>
      <if test="recommend_time != null" >
        recommend_time,
      </if>
      <if test="is_recommend != null" >
        is_recommend,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="is_sort != null" >
        is_sort,
      </if>
      <if test="sponsor != null" >
        sponsor,
      </if>
      <if test="profile != null" >
        profile,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="is_check != null" >
        is_check,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="classify_id != null" >
        #{classify_id,jdbcType=BIGINT},
      </if>
      <if test="img != null" >
        #{img,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="old_price != null" >
        #{old_price,jdbcType=DOUBLE},
      </if>
      <if test="user_id != null" >
        #{user_id,jdbcType=BIGINT},
      </if>
      <if test="create_time != null" >
        #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="recommend_seq != null" >
        #{recommend_seq,jdbcType=INTEGER},
      </if>
      <if test="recommend_time != null" >
        #{recommend_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_recommend != null" >
        #{is_recommend,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="is_sort != null" >
        #{is_sort,jdbcType=INTEGER},
      </if>
      <if test="sponsor != null" >
        #{sponsor,jdbcType=VARCHAR},
      </if>
      <if test="profile != null" >
        #{profile,jdbcType=LONGVARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="is_check != null" >
        #{is_check,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    update train
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="classify_id != null" >
        classify_id = #{classify_id,jdbcType=BIGINT},
      </if>
      <if test="img != null" >
        img = #{img,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="old_price != null" >
        old_price = #{old_price,jdbcType=DOUBLE},
      </if>
      <if test="user_id != null" >
        user_id = #{user_id,jdbcType=BIGINT},
      </if>
      <if test="create_time != null" >
        create_time = #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="recommend_seq != null" >
        recommend_seq = #{recommend_seq,jdbcType=INTEGER},
      </if>
      <if test="recommend_time != null" >
        recommend_time = #{recommend_time,jdbcType=TIMESTAMP},
      </if>
      <if test="is_recommend != null" >
        is_recommend = #{is_recommend,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="is_sort != null" >
        is_sort = #{is_sort,jdbcType=INTEGER},
      </if>
      <if test="sponsor != null" >
        sponsor = #{sponsor,jdbcType=VARCHAR},
      </if>
      <if test="profile != null" >
        profile = #{profile,jdbcType=LONGVARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="is_check != null" >
        is_check = #{is_check,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    update train
    set name = #{name,jdbcType=VARCHAR},
      classify_id = #{classify_id,jdbcType=BIGINT},
      img = #{img,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      old_price = #{old_price,jdbcType=DOUBLE},
      user_id = #{user_id,jdbcType=BIGINT},
      create_time = #{create_time,jdbcType=TIMESTAMP},
      recommend_seq = #{recommend_seq,jdbcType=INTEGER},
      recommend_time = #{recommend_time,jdbcType=TIMESTAMP},
      is_recommend = #{is_recommend,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      is_sort = #{is_sort,jdbcType=INTEGER},
      sponsor = #{sponsor,jdbcType=VARCHAR},
      profile = #{profile,jdbcType=LONGVARCHAR},
      type = #{type,jdbcType=INTEGER},
      is_check = #{is_check,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.bnsr.edu_yun.frontstage.train.po.Train" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Dec 20 15:07:28 CST 2016.
    -->
    update train
    set name = #{name,jdbcType=VARCHAR},
      classify_id = #{classify_id,jdbcType=BIGINT},
      img = #{img,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      old_price = #{old_price,jdbcType=DOUBLE},
      user_id = #{user_id,jdbcType=BIGINT},
      create_time = #{create_time,jdbcType=TIMESTAMP},
      recommend_seq = #{recommend_seq,jdbcType=INTEGER},
      recommend_time = #{recommend_time,jdbcType=TIMESTAMP},
      is_recommend = #{is_recommend,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      is_sort = #{is_sort,jdbcType=INTEGER},
      sponsor = #{sponsor,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      is_check = #{is_check,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
   <select id="queryTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
	SELECT t.id, t.name, t.status,t.sponsor,t.price, t.img,count(cs.classId) AS open_class_num,sum(cs.id) as studentNum
	FROM train t 
	LEFT JOIN (
  		SELECT cr.source_id,count(us.id) as id,cla.id as classId  
  		FROM class cla 
  		LEFT JOIN user_study us 
  		on cla.id = us.source_id  
  		LEFT JOIN class_relation cr 
   		ON cla.id = cr.class_id 
   		where cla.type!=2 
   	  	AND cla.type=1 
      	AND (us.source_type=1 or us.id is null)
      	AND (us.status is null or us.status=0 or us.status=3) 
      	AND cr.source_type =1
  		group by cla.id 
	) cs ON t.id=cs.source_id
	where t.type=${type} 
	AND t.user_id=${user_id} 
	GROUP BY t.id 
	ORDER BY t.create_time DESC
	LIMIT ${startLine},${rows}
  </select>
  
  <select id="queryTotalTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="java.lang.Integer">
	SELECT count(t.id) FROM train t 
	WHERE t.user_id=${user_id}
	and t.type=${type} 
  </select>
  
  <select id="getByTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
  
  	SELECT  
  		<if test="flag == 2">
  			u.icon,ui.titles,u.username as createUser,
  		</if>
  		t.*
  	FROM train t
  	<if test="flag == 2">
  		LEFT JOIN USER u ON u.id = t.user_id
		LEFT JOIN user_info ui ON ui.user_id = t.user_id
 	</if>
  	WHERE t.id = ${id}
  </select>
  
  
   <select id="queryTrainCenter" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
   SELECT tt.*, count(tua.id) AS appraiseNum
	FROM (
		SELECT t.id, t.create_time, t.name, t.status, t.recommend_seq, 
			t.price, t.img,count(ts.id) AS studentNum, t.sponsor
		FROM train t 
		LEFT JOIN (
			SELECT us.learn_id,us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
		) ts ON t.id = ts.learn_id
		<if test="currSignUp==1">
			INNER JOIN class_relation cla_r
			ON cla_r.source_id=t.id AND cla_r.source_type=1
			INNER JOIN class cla 
			ON cla.id = cla_r.class_id AND cla.end_time >= DATE_FORMAT(NOW(),'%Y-%m-%d') 
		</if>
		WHERE t.status = 1
		<choose>
			<when test="is_simple_train==1 and is_complex_train==0">
				AND t.type = 0
			</when>
			<when test="is_simple_train==0 and is_complex_train==1">
				AND t.type = 1
			</when>
		</choose>
		<if test="classify_id != -1">
			AND t.classify_id = ${classify_id}
		</if>
		
		GROUP BY t.id
		ORDER BY t.create_time DESC
		LIMIT ${startLine},${rows}
	) tt
	LEFT JOIN (
		SELECT ua.source_id,ua.id
		FROM user_appraise ua
		WHERE ua.source_type = 1
	) tua ON tua.source_id = tt.id
	GROUP BY tt.id
	ORDER BY
		<if test="sortType == 0">
	    	tt.create_time  
	    </if>
	    <if test="sortType == 1">
	   		studentNum  
	    </if>
	    <if test="sortType == 2">
	   		tt.recommend_seq
	    </if>
	    DESC 
  </select>
  
  <select id="queryTotalTrainCenter" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="java.lang.Integer">
  	SELECT COUNT(*) 
  	FROM (
		SELECT COUNT(*)
		FROM train t 
		LEFT JOIN (
			SELECT us.learn_id,us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
		) ts ON t.id = ts.learn_id
		<if test="currSignUp==1">
			INNER JOIN class_relation cla_r
			ON cla_r.source_id=t.id AND cla_r.source_type=1
			INNER JOIN class cla 
			ON cla.id = cla_r.class_id AND cla.end_time >= DATE_FORMAT(NOW(),'%Y-%m-%d') 
		</if>
		WHERE t.status = 1
		<choose>
			<when test="is_simple_train==1 and is_complex_train==0">
				AND t.type = 0
			</when>
			<when test="is_simple_train==0 and is_complex_train==1">
				AND t.type = 1
			</when>
		</choose>
		<if test="classify_id != -1">
			AND t.classify_id = ${classify_id}
		</if>
		GROUP BY t.id
	) tt
  </select>
  
  <select id="queryCommunityTrain" resultType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView" parameterType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView">
  		SELECT t.id, u.username, t.recommend_seq, t.name, t.img, count(ts.id) AS studentNum,(select count(tc.course_id) from train_course tc where tc.source_id=t.id) as courseNum
		FROM train t
		LEFT JOIN user u ON t.user_id = u.id
		LEFT JOIN (
			SELECT us.learn_id, us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
		) ts ON t.id = ts.learn_id
		LEFT JOIN recommended r ON r.source_id=t.id AND r.source_type=4 AND DATE_SUB(r.valid_time,INTERVAL -1 DAY)>NOW()
		WHERE t. STATUS = 1
			<if test="type != -1 ">
				AND t.type = ${type}
			</if>
			AND t.id in(
				SELECT cr.source_id
				FROM class_relation cr
				WHERE cr.source_type = 1
				AND cr.class_id IN (
					SELECT cb.class_id
					FROM class_belongs cb
					WHERE cb.source_type = ${sourceType}
					AND cb.source_id = ${id}
					AND cb.`status` = 0
					<if test="sonClassifyId != -1 and sonClassifyId != null">
						AND cb.classify_relation_id = ${sonClassifyId}
					</if>
					<if test="classifyId !=-1 and classifyId != null">
						AND cb.classify_relation_id in
							<foreach collection="classifyIds" item="classifyIds"  open="(" separator="," close=")">  
					       	 #{classifyIds}  
					    	</foreach> 
					</if>
				)
				GROUP BY cr.source_id
		)
		GROUP BY t.id
		ORDER BY 
			<if test="sortType == 0">
		    	t.create_time  
		    </if>
		    <if test="sortType == 1">
		   		studentNum  
		    </if>
		    <if test="sortType == 2">
		   		CASE WHEN r.seq IS NULL THEN 1 ELSE 0 END ,r.seq     
		    </if>
		    <if test="sortType != 2">
		   	 DESC
		    </if>
		   
		<if test="rows!=0">
			LIMIT ${startLine},${rows}
		</if>
  </select>
  
  <select id="queryMyCommunityTrain" resultType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView" parameterType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView">
  		SELECT t.id, u.username, t.recommend_seq, t.name, t.img, 
  		(SELECT count(us.id) FROM user_study us WHERE us.source_type = 1 AND (us. STATUS IS NULL OR us. STATUS = 3) AND us.learn_id = t.id) AS studentNum,
  		(select count(tc.course_id) from train_course tc where tc.source_id=t.id) as courseNum
		FROM train t
		LEFT JOIN user u ON t.user_id = u.id
		INNER JOIN (
			SELECT us.learn_id, us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
			<if test="is_studyed!=null">
				AND us.is_studyed=${is_studyed}
			</if>
			AND us.user_id=${userId}
		) ts ON t.id = ts.learn_id
		WHERE t. STATUS = 1
			<if test="type != -1 ">
				AND t.type = ${type}
			</if>
			AND t.id in(
				SELECT cr.source_id
				FROM class_relation cr
				WHERE cr.source_type = 1
				AND cr.class_id IN (
					SELECT cb.class_id
					FROM class_belongs cb
					WHERE cb.source_type = ${sourceType}
					AND cb.source_id = ${id}
					AND cb.`status` = 0
					<if test="sonClassifyId != -1 and sonClassifyId != null">
						AND cb.classify_relation_id = ${sonClassifyId}
					</if>
					<if test="classifyId !=-1 and classifyId != null">
						AND cb.classify_relation_id in
							<foreach collection="classifyIds" item="classifyIds"  open="(" separator="," close=")">  
					       	 #{classifyIds}  
					    	</foreach> 
					</if>
				)
				GROUP BY cr.source_id
		)
		GROUP BY t.id
		ORDER BY 
			<if test="sortType == 0">
		    	t.create_time  
		    </if>
		    <if test="sortType == 1">
		   		studentNum  
		    </if>
		    <if test="sortType == 2">
		   		t.recommend_seq
		    </if>
		    DESC
		<if test="rows!=0">
			LIMIT ${startLine},${rows}
		</if>
  </select>
  
  <select id="queryTotalCommunityTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView" resultType="java.lang.Integer">
  	SELECT COUNT(*) from (
  		SELECT t.id,u.username, t.name, t.img, count(ts.id) AS studentNum
		FROM train t
		LEFT JOIN user u ON t.user_id = u.id
		LEFT JOIN (
			SELECT us.learn_id, us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
		) ts ON t.id = ts.learn_id
		WHERE t. STATUS = 1
			<if test="type != -1 ">
				AND t.type = ${type}
			</if>
			AND t.id in(
				SELECT cr.source_id
				FROM class_relation cr
				WHERE cr.source_type = 1
				AND cr.class_id IN (
					SELECT cb.class_id
					FROM class_belongs cb
					WHERE cb.source_type = ${sourceType}
					AND cb.source_id = ${id}
					AND cb.`status` = 0
					<if test="sonClassifyId != -1 and sonClassifyId != null">
						AND cb.classify_relation_id = ${sonClassifyId}
					</if>
					<if test="classifyId !=-1 and classifyId != null">
						AND cb.classify_relation_id in
							<foreach collection="classifyIds" item="classifyIds"  open="(" separator="," close=")">  
					       	 #{classifyIds}  
					    	</foreach> 
					</if>
				)
				GROUP BY cr.source_id
		)
		GROUP BY t.id
  	) tt 
  </select>
  
  <select id="queryTotalMyCommunityTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.CommunityCenterView" resultType="java.lang.Integer">
  	SELECT COUNT(*) from (
  		SELECT t.id,u.username, t.name, t.img, count(ts.id) AS studentNum
		FROM train t
		LEFT JOIN user u ON t.user_id = u.id
		INNER JOIN (
			SELECT us.learn_id, us.id
			FROM user_study us
			WHERE us.source_type = 1
			AND (us. STATUS IS NULL OR us. STATUS = 3)
			<if test="is_studyed!=null">
				AND us.is_studyed=${is_studyed}
			</if>
			AND us.user_id=${userId}
		) ts ON t.id = ts.learn_id
		WHERE t. STATUS = 1
			<if test="type != -1 ">
				AND t.type = ${type}
			</if>
			AND t.id in(
				SELECT cr.source_id
				FROM class_relation cr
				WHERE cr.source_type = 1
				AND cr.class_id IN (
					SELECT cb.class_id
					FROM class_belongs cb
					WHERE cb.source_type = ${sourceType}
					AND cb.source_id = ${id}
					AND cb.`status` = 0
					<if test="sonClassifyId != -1 and sonClassifyId != null">
						AND cb.classify_relation_id = ${sonClassifyId}
					</if>
					<if test="classifyId !=-1 and classifyId != null">
						AND cb.classify_relation_id in
							<foreach collection="classifyIds" item="classifyIds"  open="(" separator="," close=")">  
					       	 #{classifyIds}  
					    	</foreach> 
					</if>
				)
				GROUP BY cr.source_id
		)
		GROUP BY t.id
  	) tt 
  </select>
     <select id="queryMyTrain" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
  	SELECT t.id, t.name, t.status, t.price, t.img,t.sponsor,count(cs.id) as studentNum
	FROM train t 
	LEFT JOIN user_study us on t.id = us.learn_id and us.source_type=1
	LEFT JOIN (
		SELECT us.learn_id,us.id
		FROM user_study us
		WHERE us.source_type=1
		AND (us.status is null or us.status=0 or us.status=3)
		) cs ON t.id=cs.learn_id
	WHERE us.user_id = ${user_id} 
	AND t.type = ${type}
	GROUP BY t.id
	ORDER BY t.create_time DESC
	LIMIT ${startLine},${rows}
  </select>
     <select id="queryMyTrainCount" parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView" resultType="java.lang.Integer">
  	SELECT COUNT(*) 
	FROM train t 
	LEFT JOIN user_study us on t.id = us.learn_id and us.source_type=1
	WHERE us.user_id = ${user_id} 
	AND t.type = ${type}
	 </select>
  <select id="find" resultType="cn.bnsr.edu_yun.frontstage.train.view.TrainView"   parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
   SELECT t.id,COUNT(DISTINCT us.id) AS studentNum,t.name,cla.classify_name,t.is_recommend,
   t.recommend_seq AS recommendSeq,t.recommend_time AS recommendTime,t.status,t.type,
   t.create_time,u.username,COUNT(DISTINCT cr.id) AS classNum,
	(CASE WHEN t.type = 0 THEN
	  (SELECT COUNT(DISTINCT tc.id) FROM train_course tc WHERE tc.source_id = t.id AND tc.source_type = 0)
	 ELSE
	  (SELECT COUNT(DISTINCT tc.id)	FROM train_phase tp
				LEFT JOIN train_course tc ON tc.source_id = tp.id AND tc.source_type = 1
				WHERE tp.train_id = t.id)
	 END) AS courseCount
   FROM train t
   LEFT JOIN classify cla ON cla.id = t.classify_id
   LEFT JOIN `user` u ON u.id = t.user_id
   LEFT JOIN user_study us ON us.learn_id = t.id AND us.source_type = 1
   AND (us. STATUS IS NULL	OR us. STATUS = 0 OR us. STATUS = 3)
   LEFT JOIN class_relation cr ON cr.source_id=t.id AND cr.source_type=1
   WHERE 1 = 1
   <if test="status != null and status !='-1'">
      AND t.status = ${status}
   </if>
   <if test="name != null">
	  <![CDATA[AND t.name LIKE  '%${name}%']]>
   </if>
   GROUP BY t.id
   <if test="sort !=null and order != null">
        <choose>
        <when test="sort =='status'"> ORDER BY t.${sort}</when>
        <when test="sort =='create_time'"> ORDER BY t.${sort}</when>
        <when test="sort =='studentNum'"> ORDER BY ${sort}</when>
        <when test="sort =='classNum'"> ORDER BY ${sort}</when>
        </choose>
        ${order}
    </if>
    LIMIT ${page},${rows}
  </select>
  <select id="count" resultType="java.lang.Long"   parameterType="cn.bnsr.edu_yun.frontstage.train.view.TrainView">
   SELECT COUNT(*) FROM train
   WHERE 1 = 1
   <if test="status != null">
      AND status = ${status}
   </if>
   <if test="name != null">
	  <![CDATA[AND name LIKE  '%${name}%']]>
   </if>
  </select>
  <select id="getMaxSeq" resultType="java.lang.Integer">
  	SELECT IFNULL(MAX(recommend_seq),0)
  	FROM train 
  	WHERE is_recommend = 0
  </select>
	 
</mapper>